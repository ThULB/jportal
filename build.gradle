import java.io.File
import java.nio.file.Files
import java.nio.file.Paths;
import java.util.HashSet;

def mcrVersion = '2015.03-SNAPSHOT'
def jettyVersion = "9.2.7.v20150116"
def jerseyVersion = "1.19"
def hibernateVersion = "4.3.4.Final"
def jpgroup = "fsu.thulb"
def jpversion = "2.0.18-SNAPSHOT"

def resourcePaths = new HashSet<File>();

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmmss')
    return formattedDate
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    eclipse {
        jdt {
            sourceCompatibility = 1.7
            targetCompatibility = 1.7
        }
        classpath { downloadSources = true }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    def releaseURL = "http://artifactory.mycore.de/mycore-releases"
    def snapshotsURL = "http://artifactory.mycore.de/mycore-snapshots"

    repositories {
        mavenLocal()

        maven { url releaseURL }

        maven { url snapshotsURL }
    }

    configurations { deployerJars }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-http:2.8"
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "scp://repos.mycompany.com/releases") {
                authentication(userName: "me", password: "myPassword")
            }
        }
    }

    dependencies {
        testCompile 'junit:junit:4.+'
        testCompile "log4j:log4j:1.2.17"
        testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.+'
    }
}

def mcrComplDep = [
        "org.mycore:mycore-base:$mcrVersion",
        "org.mycore:mycore-solr:$mcrVersion",
        "org.mycore:mycore-mets:$mcrVersion",
        "org.mycore:mycore-iview2:$mcrVersion",
        "org.mycore:mycore-user2:$mcrVersion",
        "org.mycore:mycore-classeditor:$mcrVersion",
        "org.mycore:mycore-mets:$mcrVersion",
        "org.mycore:mycore-oai:$mcrVersion",
        "org.mycore:mycore-session-listing:$mcrVersion",
        "org.mycore:mycore-swf:$mcrVersion",
        'org.mycore.legacy:mycore-legacy-search:1.0-SNAPSHOT',
        'org.mycore.sru:sru-adapter:0.0.1-SNAPSHOT',
        'org.mycore.mets:mets-model:0.6-SNAPSHOT',
        'org.mycore.mets:mets-validator:1.1-SNAPSHOT',
        'javax.servlet:javax.servlet-api:3.1.0',
        'fsu.archiv.mycore.sru:sru-pica-import:0.0.1-SNAPSHOT'
]



subprojects {

    def noMCRDep = [
            "jportal_jetty_tools",
            "jportal_web_tests",
            "java_agent"
    ]

    if (!(project.name in noMCRDep)) {
        dependencies {
            mcrComplDep.each { dep -> compile dep }
        }
    }

    def noJPModuleDep = [
            "jportal-commons",
            "jportal_ext_web_lib",
            "jportal_iview2_plugin",
            "jportal_emb_hsql",
            "jportal_jetty_tools",
            "java_agent",
            "jportal_web_tests"
    ]

    if (project.name != 'jportal_mcr_module' && !(project.name in noJPModuleDep)) {
        dependencies { compile project(':jportal_mcr_module') }
    }

    def mcrModule = [
            "jportal_mcr_module",
            "jportal_derivate_browser",
            "jportal_move_obj_module",
            "jportal_laws",
            "jportal_doublet_finder_module"
    ]

    if (project.name in mcrModule) {
        println "MCRModule $project.name"
        jar {
            manifest {
                attributes("MCR-Application-Module": "$project.name")
                attributes("MCR-Artifact-Id": "$project.name")
                attributes("version": "$project.version")
                attributes("timestamp": getDate())
            }
        }
    }
    resourcePaths.addAll(sourceSets.main.resources.srcDirs);

    test {
        systemProperty "project.buildDir", project.buildDir.absolutePath
    }
}

project(':jportal_mcr_module') {
    configurations { iview }

    dependencies {
        compile project(':jportal-commons')
        compile project(':jportal_ext_web_lib')
        compile project(':jportal_iview2_plugin')
        compile 'de.uni-jena.thulb.oai:archive-oai-resources:0.0.1-SNAPSHOT'
        compile 'log4j:log4j:1.2.17'
        compile "com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:$jerseyVersion"
        compile "com.sun.jersey.contribs:jersey-apache-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-server:$jerseyVersion"
        compile 'org.easymock:easymock:3.2'
        compile 'xmlunit:xmlunit:1.3'
        compile 'javax.xml.bind:jaxb-api:2.2.1'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.1.1'
        iview 'org.mycore:mycore-viewer:0.2-SNAPSHOT'
    }

    def gruntBuildDir = "$project.buildDir/grunt"
    processResources.doFirst {
        copy {
            from 'grunt'
            include '**/*'
            into gruntBuildDir
        }

        def iviewJar
        configurations.iview.each { file ->
            iviewJar = file.absolutePath
        }
        copy {
            from zipTree(iviewJar)
            include '**/iview-client-base.d.ts', '**/iview-client-mets.d.ts', '**/jquery.d.ts'
            into "$gruntBuildDir/iview-client"
            includeEmptyDirs = false
        }

        exec {
            workingDir gruntBuildDir
            commandLine 'npm', 'install'
        }

        exec {
            workingDir gruntBuildDir
            commandLine "node_modules/grunt-cli/bin/grunt"
        }
    }

    processResources {
        from("$gruntBuildDir/classes/META-INF") { into 'META-INF' }
        from("$project.buildDir/templateName.xml") { into 'META-INF/resources/templates' }
    }
}

buildscript {
    repositories {
        jcenter()
        // enable this to use snapshot versions of Gretty:
        // maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath "org.hsqldb:hsqldb:2.3.2"
    }
}

repositories {
    jcenter()
    // enable this to use snapshot versions of Gretty:
    // maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

project(':jportal_webapp') {
    apply plugin: 'war'
    apply plugin: 'org.akhikhl.gretty'

    configurations {
        applet
        agent
    }

    dependencies {
        testCompile 'junit:junit:4.+'
        testCompile "log4j:log4j:1.2.17"
        testCompile 'org.seleniumhq.selenium:selenium-java:2.+'
        testCompile "org.mycore:mycore-viewer:0.4-SNAPSHOT:tests"
        runtime "org.mycore:mycore-xeditor:$mcrVersion"
        runtime "org.mycore:mycore-webcli:$mcrVersion"
        runtime "org.mycore:mycore-acl-editor2:$mcrVersion"
        runtime "org.mycore:mycore-ifs:$mcrVersion"
        runtime "org.hibernate:hibernate-c3p0:$hibernateVersion"
        runtime "org.hibernate:hibernate-ehcache:$hibernateVersion"
        runtime 'com.mchange:c3p0:0.9.2.1'
        runtime project(':jportal_laws')
        runtime project(':jportal_derivate_browser')
        runtime project(':jportal_doublet_finder_module')
        runtime project(':jportal_move_obj_module')
        runtime project(':jportal_acl_ip_editor_module')
        applet "org.mycore.fileupload:fileupload-applet:1.+"
    }

    war {
        from(configurations.applet) {
            into 'applet'
            rename 'fileupload-applet(.*).jar', 'upload.jar'
        }

        manifest {
            attributes("Webapp": "$project.name")
            attributes("version": "$project.version")
        }
    }

    // don't run webtests at compile time
    test {
        exclude '**/test'
    }

    task webTests(type: Test, dependsOn: 'test') {
        outputs.upToDateWhen { false }
        include '**/test/*'
        systemProperty "project.build.directory", project.reportsDir
    }

    farms {
        dependencies {
            gretty 'org.hsqldb:hsqldb:2.3.2'
        }

        ['App', 'WebTests'].each { farmName ->
            farm farmName, {
                def pathName = farmName.equals('App') ? "jportal" : "jportal-webTests"
                def mcrHome = System.getProperty("user.home") + "/.mycore"
                webapp "org.mycore.solr:solr:4.7.2@war", contextPath: "/solr"
                webapp project, contextPath: "/$pathName"

                integrationTestTask = "webTests"

                if (farmName.equals('App')) {
                    dependencies {
                        gretty project(':java_agent')
                    }
                    def agentOp
                    for (path in resourcePaths) {
                        if (agentOp == null) {
                            agentOp = path.toString()
                        } else {
                            agentOp = agentOp + "," + path
                        }
                    }
                    jvmArgs "-javaagent:" + project(':java_agent').tasks.getByPath(':java_agent:jar').archivePath + "=$agentOp"
                } else if(farmName.equals('WebTests')) {
                    // Gretty don't load static files from META-INF in jar files, so this is a workaround
                    webapp project(':jportal_webapp').tasks.getByPath(':jportal_webapp:war').archivePath, contextPath: "/$pathName"
                    // Gretty need the webapp project to run the webtests, this is due to the workaround above
                    webapp project
                    mcrHome = "$project.buildDir/mcrHome"
                }

                def appPath = "$mcrHome/$pathName"
                def solrHome = "$appPath/solr-home"

                systemProperty "MCR.AppName", pathName
                systemProperty "MCR.Home", mcrHome
                systemProperty "solr.solr.home", solrHome

                jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8295'
                port = 8291
                serverConfigFile = "$project.projectDir/config/jetty/jetty-config.xml"

                onStart {
                    copy {
                        from("$project.projectDir/config") {
                            include "**"
                            exclude "jetty/**"
                        }
                        into appPath

                        def moduleFiles = project(':jportal_mcr_module').fileTree("src/main/resources").files

                        configurations {
                            solr
                        }
                        dependencies {
                            solr "org.mycore:mycore-solr:$mcrVersion@jar"
                        }
                        def solrJar
                        configurations.solr.each { file ->
                            solrJar = file.absolutePath
                            println "Solr Jar $solrJar";
                        }

                        into("solr-home") {
                            from moduleFiles
                            include '**/solr.xml'
                        }

                        into("solr-home/conf") {
                            from moduleFiles
                            include '**/schema.xml', '**/solrconfig.xml', '**/stopwords.txt'
                            from zipTree(solrJar).files
                            include 'classificationSchema.xml'
                        }

                    }


                    def hsqlDBPath = Paths.get(mcrHome, pathName, "hsqldb-data", "database")
                    String[] args = ["-database", hsqlDBPath.toString(), "-port", "8298"]

                    org.hsqldb.Server.main(args)
                }
            }

        }
    }

}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.2.1' }
