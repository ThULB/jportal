buildscript {
    repositories {
        jcenter()
        // enable this to use snapshot versions of Gretty:
        // maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
    }

    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.2.4'
        classpath "org.hsqldb:hsqldb:$hsqldbVersion"
//        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.10'
    }
}

plugins {
    id "com.moowork.node" version "0.10"
}

import java.io.File
import java.nio.file.Files
import java.nio.file.Paths;
import java.util.HashSet;

//def mcrVersion = '2015.08-SNAPSHOT'

def resourcePaths = new HashSet<File>();
resourcePaths.addAll('/Users/chi/Development/projects/mycore/mycore-acl-editor2/src/main/resources');

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmmss')
    return formattedDate
}


repositories {
    jcenter()
    // enable this to use snapshot versions of Gretty:
    // maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

allprojects{
    def releaseURL = "http://artifactory.mycore.de/mycore-releases"
    def snapshotsURL = "http://artifactory.mycore.de/mycore-snapshots"

    repositories {
        mavenLocal()

        maven { url releaseURL }

        maven { url snapshotsURL }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    eclipse {
        jdt {
            sourceCompatibility = javaVersion
            targetCompatibility = javaVersion
        }
        classpath { downloadSources = true }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations { deployerJars }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-http:2.8"
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "scp://repos.mycompany.com/releases") {
                authentication(userName: "me", password: "myPassword")
            }
        }
    }

    dependencies {
        testCompile 'org.jmockit:jmockit:1.16'
        testCompile 'junit:junit:4.+'
        testCompile 'com.github.tomakehurst:wiremock:1.+'
        testCompile 'org.apache.logging.log4j:log4j-api:2.3'
        testCompile 'org.apache.logging.log4j:log4j-core:2.3'
        testCompile 'org.seleniumhq.selenium:selenium-java:2.+'
    }

    if (project.name != 'jportal_webapp') {
        resourcePaths.addAll(sourceSets.main.resources.srcDirs);
    }

    test {
        systemProperty "project.buildDir", project.buildDir.absolutePath
    }

    ext.mcrModule = {
        jar {
            manifest {
                attributes("MCR-Application-Module": "$project.name")
                attributes("MCR-Artifact-Id": "$project.name")
                attributes("version": "$project.version")
                attributes("timestamp": getDate())
            }
        }
    }

    jar << {
        copy {
            from "$project.buildDir/tmp/jar"
            include "MANIFEST.MF"
            into "$project.buildDir/resources/main/META-INF"
        }
    }
}

project(':jportal_mcr_module') {
    apply plugin: 'com.moowork.node'

    mcrModule()

    configurations {
        iview
    }

    dependencies {
        compile "org.mycore:mycore-base:$mcrVersion"
        compile "org.mycore:mycore-solr:$mcrVersion"
        compile "org.mycore:mycore-mets:$mcrVersion"
        compile "org.mycore:mycore-iview2:$mcrVersion"
        compile "org.mycore:mycore-user2:$mcrVersion"
        compile "org.mycore:mycore-classeditor:$mcrVersion"
        compile "org.mycore:mycore-mets:$mcrVersion"
        compile "org.mycore:mycore-oai:$mcrVersion"
        compile "org.mycore:mycore-session-listing:$mcrVersion"
        compile "org.mycore:mycore-swf:$mcrVersion"
        compile "org.mycore:mycore-urn:$mcrVersion"
        compile 'org.mycore.sru:sru-adapter:0.0.1-SNAPSHOT'
        compile 'org.mycore.mets:mets-model:0.9-SNAPSHOT'
        compile 'org.mycore.mets:mets-validator:1.2-SNAPSHOT'
        compile 'javax.servlet:javax.servlet-api:3.1.0'
        compile 'fsu.archiv.mycore.sru:sru-pica-import:0.0.1-SNAPSHOT'

        compile 'org.apache.logging.log4j:log4j-api:2.3'
        compile 'org.apache.logging.log4j:log4j-core:2.3'
        compile "com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:$jerseyVersion"
        compile "com.sun.jersey.contribs:jersey-apache-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-server:$jerseyVersion"
        compile 'org.easymock:easymock:3.2'
        compile 'xmlunit:xmlunit:1.3'
        compile 'javax.xml.bind:jaxb-api:2.2.1'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.1.1'
        iview "org.mycore:mycore-viewer:$mcrViewerVersion"

        // webjars
        compile 'org.webjars.bower:jquery:2.1.4'
        compile 'org.webjars:jquery-ui:1.11.4'
        compile 'org.webjars:cowwoc-jquery-address:1.6'
        compile 'org.webjars:bootstrap:3.3.4'
        compile 'org.webjars:Eonasdan-bootstrap-datetimepicker:4.15.35'
        compile 'org.webjars.npm:bootstrap-dialog:1.34.6'
        compile 'org.webjars:mustachejs:0.8.2'
        compile 'org.webjars:ckeditor:4.5.3'
        compile 'org.webjars:font-awesome:4.4.0'
        compile 'org.webjars:momentjs:2.10.6'
        compile 'org.webjars:highstock:2.0.4'
    }

    def nodeBuildDir = "$project.buildDir/node"

    node {
        // Version of node to use.
        version = '0.11.10'

        // Version of npm to use.
        npmVersion = '2.1.5'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        // Set the work directory where node_modules should be located
        nodeModulesDir = file(nodeBuildDir)
    }

    task npmSetupDir {
        doFirst {
            copy {
                from 'node'
                include '**/*'
                into nodeBuildDir
            }
        }
    }

    task buildIviewMod(type: NodeTask, dependsOn: npmInstall) {

        doFirst {
            def iviewJar
            configurations.iview.each { file ->
                iviewJar = file.absolutePath
            }
            copy {
                from zipTree(iviewJar)
                include '**/iview-client-base.d.ts', '**/iview-client-mets.d.ts', '**/jquery.d.ts'
                into "$nodeBuildDir/iview-client"
                includeEmptyDirs = false
            }
        }
        script = file("$nodeBuildDir/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=$nodeBuildDir/GruntFile.js"]
    }

    task copyIviewMod(type: Copy, dependsOn: buildIviewMod) {
        from "$nodeBuildDir/classes/META-INF"
        into "$project.buildDir/resources/main/META-INF"
    }

    npmSetup.dependsOn npmSetupDir
    jar.dependsOn copyIviewMod
}

project(':jportal_acl_ip_editor_module'){
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_derivate_browser'){
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_move_obj_module'){
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_doublet_finder_module'){
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_laws') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_IT-TestData') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_webapp') {
    apply plugin: 'war'
    apply plugin: 'org.akhikhl.gretty'

    configurations {
        applet
        runtime.exclude group: "org.slf4j", module: "slf4j-nop"
    }

    dependencies {
        testCompile 'junit:junit:4.+'
        testCompile "org.apache.logging.log4j:log4j-api:2.3"
        testCompile "org.apache.logging.log4j:log4j-core:2.3"
        testCompile "org.hamcrest:hamcrest-library:1.3"
        testCompile 'org.seleniumhq.selenium:selenium-java:2.+'
        testCompile "org.mycore:mycore-viewer:$mcrViewerVersion:tests"
        runtime "org.apache.logging.log4j:log4j-web:2.3"
        runtime "org.mycore:mycore-xeditor:$mcrVersion"
        runtime "org.mycore:mycore-webcli:$mcrVersion"
        runtime "org.mycore:mycore-acl-editor2:$mcrVersion"
        runtime "org.mycore:mycore-ifs:$mcrVersion"
        runtime "org.hibernate:hibernate-c3p0:$hibernateVersion"
        runtime "org.hibernate:hibernate-ehcache:$hibernateVersion"
        runtime 'com.mchange:c3p0:0.9.5.1'
        runtime project(':jportal_laws')
        runtime project(':jportal_derivate_browser')
        runtime project(':jportal_doublet_finder_module')
        runtime project(':jportal_move_obj_module')
        runtime project(':jportal_acl_ip_editor_module')
        runtime project(':jportal_mcr_module')
        applet "org.mycore.fileupload:fileupload-applet:1.+"
    }

    war {
        from(configurations.applet) {
            into 'applet'
            rename 'fileupload-applet(.*).jar', 'upload.jar'
        }

        manifest {
            attributes("Webapp": "$project.name")
            attributes("version": "$project.version")
        }
    }

    // don't run webtests at compile time
    test {
        exclude '**/test'
    }

    task webTests(type: Test, dependsOn: 'test') {
        outputs.upToDateWhen { false }
        include '**/test/*'
        systemProperty "project.build.directory", project.reportsDir
    }

//    gretty {
//        managedClassReload=true
//    }

    farms {
        dependencies {
            gretty "org.hsqldb:hsqldb:$hsqldbVersion"
        }

        // Single: starts app and db
        // App: starts app, solr and db
        // WebTests: runs web tests

        ['Single', 'App', 'WebTests'].each { farmName ->
            farm farmName, {
			    def appName = "jportal"
				def mcrHome = System.getProperty("user.home") + "/.mycore"

            	if(farmName.equals('WebTests')) {
                    dependencies {
                        runtime project(':jportal_IT-TestData')
                    }
            		appName = "jportal-webTests"
                	mcrHome = "$project.buildDir/mcrHome"
                	integrationTestTask = "webTests"
            	}
            	if(!farmName.equals('Single')) {
                	webapp "org.mycore.solr:solr:$solrVersion@war", contextPath: "/solr"
                }
                webapp project, contextPath: "/$appName"

                if (farmName.equals('App') || farmName.equals('Single')) {
                    dependencies {
                        gretty project(':java_agent')
                    }
                    def agentOp = getAgentOp(resourcePaths);
                    jvmArgs "-javaagent:" + project(':java_agent').tasks.getByPath(':java_agent:jar').archivePath + "=$agentOp"
                } else if (farmName.equals('WebTests')) {
                    webapp project, contextPath: "/$appName"
                }


			    systemProperty "MCR.AppName", appName
			    systemProperty "MCR.Home", mcrHome

				jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8295'
			    jvmArgs '-Xmx2048m'
			    port = 8291

			    serverConfigFile = "$project.projectDir/config/jetty/jetty-config.xml"

                onStart {
                	if(!farmName.equals('Single')) {
				        def appPath = "$mcrHome/$appName"
				        def confDir = "$project.projectDir/config"
                        systemProperty "solr.solr.home", "$appPath/solr-home"
                        initSolr(appPath, confDir)
					}
                    startDB(mcrHome, appName)
                }
            }

        }
    }

}

def getAgentOp(resourcePaths) {
    def agentOp
    for (path in resourcePaths) {
        if (agentOp == null) {
            agentOp = path.toString()
        } else {
            agentOp = agentOp + "," + path
        }
    }
    return agentOp;
}

def initSolr(appPath, confDir) {
    if (!file(appPath).exists()) {
        copy {
            from(confDir) {
                include "**"
                exclude "jetty/**"
            }
            into appPath

            def moduleFiles = project(':jportal_mcr_module').fileTree("src/main/resources").files

            configurations {
                solr
            }
            dependencies {
                solr "org.mycore:mycore-solr:$mcrVersion@jar"
            }
            def solrJar
            configurations.solr.each { file ->
                solrJar = file.absolutePath
                println "Solr Jar $solrJar";
            }

            into("solr-home") {
                from moduleFiles
                include '**/solr.xml'
            }

            into("solr-home/conf") {
                from moduleFiles
                include '**/schema.xml', '**/solrconfig.xml', '**/stopwords.txt'
                from zipTree(solrJar).files
                include 'classificationSchema.xml'
            }

        }
    }
}

def startDB(mcrHome, appName) {
    def hsqlDBPath = Paths.get(mcrHome, appName, "hsqldb-data", "database")
    String[] args = ["-database", hsqlDBPath.toString(), "-port", "8298"]
    org.hsqldb.Server.main(args)
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.8' }
