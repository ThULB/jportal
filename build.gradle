//def mcrVersion = '2014.07-SNAPSHOT'
def mcrVersion = '2015.01-SNAPSHOT'
def jettyVersion = "9.2.2.v20140723"
def hibernateVersion = "4.3.4.Final"

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmmss')
    return formattedDate
}

//project.ext.needMCR = true

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'

    eclipse {
        jdt {
            sourceCompatibility = 1.7
            targetCompatibility = 1.7
        }
        classpath { downloadSources=true }
    }

    group = "fsu.thulb"
    version = "2.0.18-SNAPSHOT"
    repositories {
        mavenLocal()

        maven{ url "http://artifactory.mycore.de/mycore-releases" }

        maven{ url "http://artifactory.mycore.de/mycore-snapshots" }
    }


    if (project.name != 'jportal_jetty_tools') {
        dependencies{
            compile "org.mycore:mycore-base:$mcrVersion"
            compile "org.mycore:mycore-solr:$mcrVersion"
            compile "org.mycore:mycore-mets:$mcrVersion"
            compile "org.mycore:mycore-iview2:$mcrVersion"
            compile "org.mycore:mycore-user2:$mcrVersion"
            compile "org.mycore:mycore-classeditor:$mcrVersion"
            compile "org.mycore:mycore-mets:$mcrVersion"
            compile "org.mycore:mycore-oai:$mcrVersion"
            //        compile "org.mycore:mycore-handle:$mcrVersion"
            compile 'org.mycore.legacy:mycore-legacy-search:1.0-SNAPSHOT'
            compile 'org.mycore.sru:sru-adapter:0.0.1-SNAPSHOT'
            compile 'org.mycore.mets:mets-model:0.5-SNAPSHOT'
            compile 'javax.servlet:javax.servlet-api:3.1.0'
            compile 'fsu.archiv.mycore.sru:sru-pica-import:0.0.1-SNAPSHOT'
            testCompile group: 'junit', name: 'junit', version: '4.+'
        }
    }

    def noJPModuleDep = [
        "jportal-commons",
        "jportal_ext_web_lib",
        "jportal_iview2_plugin",
        "jportal_emb_hsql",
        "jportal_jetty_tools"
    ]

    if(project.name != 'jportal_mcr_module' && !(project.name in noJPModuleDep)){
        dependencies{ compile project(':jportal_mcr_module') }
    }

    def mcrModule = [
        "jportal_mcr_module"
    ]

    if(project.name in mcrModule){
        println "MCRModule $project.name"
        jar {
            manifest {
                attributes("MCR-Application-Module": "$project.name")
                attributes("MCR-Artifact-Id": "$project.name")
                attributes("version": "$project.version")
                attributes("timestamp": getDate())
            }
        }
    }
}

project(':jportal_mcr_module'){
    configurations{ iview }

    dependencies{
        compile project(':jportal-commons')
        compile project(':jportal_ext_web_lib')
        compile project(':jportal_iview2_plugin')
        compile 'de.uni-jena.thulb:JPJaxbPojos:0.0.1-SNAPSHOT'
        compile 'de.uni-jena.thulb.oai:archive-oai-resources:0.0.1-SNAPSHOT'
        compile 'log4j:log4j:1.2.17'
        compile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:1.17'
        compile 'com.sun.jersey.contribs:jersey-apache-client:1.17'
        compile 'com.sun.jersey:jersey-client:1.17'
        compile 'com.sun.jersey:jersey-server:1.17'
        compile 'org.easymock:easymock:3.2'
        compile 'xmlunit:xmlunit:1.3'
        compile 'javax.xml.bind:jaxb-api:2.2.1'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.1.1'
        iview 'org.mycore:mycore-viewer:0.2-SNAPSHOT'
    }

    def gruntBuildDir = "$project.buildDir/grunt"
    processResources.doFirst{
        copy {
            from 'grunt'
            include '**/*'
            into gruntBuildDir
        }

        def iviewJar
        configurations.iview.each{ file ->
            iviewJar = file.absolutePath
        }
        copy {
            from zipTree(iviewJar)
            include '**/iview-client-base.d.ts', '**/iview-client-mets.d.ts', '**/jquery.d.ts'
            into "$gruntBuildDir/iview-client"
            includeEmptyDirs = false
        }

        exec {
            workingDir gruntBuildDir
            commandLine 'npm', 'install'
        }

        exec {
            workingDir gruntBuildDir
            commandLine "node_modules/grunt-cli/bin/grunt"
        }
    }

    processResources {
        from("$gruntBuildDir/classes/META-INF") { into 'META-INF' }
        from("$project.buildDir/templateName.xml") { into 'META-INF/resources/templates' }
    }
}

project(':jportal_webapp'){
    apply plugin: 'war'

    configurations {
        jetty
        solr
        applet
    }

    dependencies {
        runtime "org.mycore:mycore-xeditor:$mcrVersion"
        runtime "org.mycore:mycore-webcli:$mcrVersion"
        runtime "org.mycore:mycore-acl-editor2:$mcrVersion"
        runtime "org.hibernate:hibernate-c3p0:$hibernateVersion"
        runtime "org.hibernate:hibernate-ehcache:$hibernateVersion"
        runtime 'com.mchange:c3p0:0.9.2.1'
        runtime project(':jportal_laws')
        applet "org.mycore.fileupload:fileupload-applet:1.2-SNAPSHOT"
    }

    task runJetty(type: JavaExec) {
        dependencies {
            jetty "org.eclipse.jetty:jetty-runner:$jettyVersion"
            jetty project(':jportal_jetty_tools')
            solr "org.mycore.solr:solr:4.7.2@war"
        }
        
        def solrWarFilePath
        configurations.solr.each { File file -> solrWarFilePath = file.absolutePath }

        main = "org.eclipse.jetty.runner.Runner"
        systemProperties.put("MCR.AppName","jportal")
        jvmArgs '-Xdebug'
        jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8295'
        jvmArgs "-javaagent:" + project(':java_agent').tasks.getByPath(':java_agent:jar').archivePath
        args '--config', 'jetty/jetty-config.xml'
        args '--path', '/solr', solrWarFilePath
        args '--path', '/jportal', war.archivePath
        classpath configurations.jetty
    }

    war {
        from(configurations.applet){
            into 'applet'
            rename 'fileupload-applet(.*).jar', 'upload.jar'
        }
    }
}

project(':jportal_jetty_tools'){
    //    project.ext.needMCR = false
    configurations { 
        solr
         
        }

    dependencies{
        //            compile "org.mycore:mycore-base:$mcrVersion"
        compile 'org.hsqldb:hsqldb:2.3.2'
        compile 'javax.servlet:javax.servlet-api:3.0.1'
        compile 'log4j:log4j:1.2.17'
        solr "org.mycore:mycore-solr:$mcrVersion@jar"
    }

    def solrBuildDir = "$project.buildDir/solr"
    processResources.doFirst{
        def solrJar
        configurations.solr.each{ file ->
            solrJar = file.absolutePath
            println "Solr Jar $solrJar";
        }
        copy {
            from zipTree(solrJar).files
            include 'classificationSchema.xml'
            into solrBuildDir
            includeEmptyDirs = false
        }
        
        copy {
            from project(':jportal_mcr_module').fileTree("src/main/resources").files
            include '**/solr.xml', '**/schema.xml', '**/solrconfig.xml', '**/stopwords.txt'
            into solrBuildDir
            includeEmptyDirs = false
        }
    }
    processResources {
        from("$solrBuildDir") {
            include 'classificationSchema.xml', 'schema.xml', 'solrconfig.xml', 'stopwords.txt'
            into 'config/jportal_jetty_tools/solr/solr-home/conf'
        }
        
        from("$solrBuildDir") {
            include 'solr.xml'
            into 'config/jportal_jetty_tools/solr/solr-home'
        }
    }
}

configurations.all { resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes' }