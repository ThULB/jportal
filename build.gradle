import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes

def resourcePaths = new HashSet<File>();

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmmss')
    return formattedDate
}

allprojects {
    def releaseURL = "http://artifactory.mycore.de/mycore-releases"
    def snapshotsURL = "http://artifactory.mycore.de/mycore-snapshots"

    repositories {
        mavenLocal()

        maven { url releaseURL }

        maven { url snapshotsURL }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    eclipse {
        jdt {
            sourceCompatibility = javaVersion
            targetCompatibility = javaVersion
        }
        classpath { downloadSources = true }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations { deployerJars }

    if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
        uploadArchives {
            repositories.mavenDeployer {
                repository(url: "http://artifactory.mycore.de/libs-${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}-local") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }
        }
    }

    dependencies {
        testCompile 'org.jmockit:jmockit:1.20'
        testCompile 'junit:junit:4.12'
        testCompile 'com.github.tomakehurst:wiremock:1.57'
        testCompile 'org.apache.logging.log4j:log4j-api:$log4jVersion'
        testCompile 'org.apache.logging.log4j:log4j-core:$log4jVersion'
        testCompile 'org.seleniumhq.selenium:selenium-java:2.53.0'
    }

    if (project.name != 'jportal_webapp') {
        resourcePaths.addAll(sourceSets.main.resources.srcDirs);
    }

    test {
        systemProperty "project.buildDir", project.buildDir.absolutePath
    }

    ext.mcrModule = {
        jar {
            manifest {
                attributes("MCR-Application-Module": "$project.name")
                attributes("MCR-Artifact-Id": "$project.name")
                attributes("version": "$project.version")
                attributes("timestamp": getDate())
            }
        }
    }

    jar.doLast {
        copy {
            from "$project.buildDir/tmp/jar"
            include "MANIFEST.MF"
            into "$project.buildDir/resources/main/META-INF"
        }
    }
}

project(':jportal_mcr_module') {

    mcrModule()

    dependencies {
        // test
        testCompile 'org.mycore:mycore-base:$mcrVersion:tests'
        testCompile 'org.hibernate:hibernate-hikaricp:5.2.2.Final'
        testCompile 'com.h2database:h2:1.4.192'

        // mycore
        compile "org.mycore:mycore-base:$mcrVersion"
        compile "org.mycore:mycore-solr:$mcrVersion"
        compile "org.mycore:mycore-iview2:$mcrVersion"
        compile "org.mycore:mycore-viewer:$mcrVersion"
        compile "org.mycore:mycore-user2:$mcrVersion"
        compile "org.mycore:mycore-classeditor:$mcrVersion"
        compile "org.mycore:mycore-mets:$mcrVersion"
        compile "org.mycore:mycore-oai:$mcrVersion"
        compile "org.mycore:mycore-urn:$mcrVersion"
        compile "org.mycore:mycore-impex:$mcrVersion"
        compile "org.mycore:mycore-webtools:$mcrVersion"
        compile "org.mycore:mycore-webcli:$mcrVersion"
        compile "org.mycore:mycore-pi:$mcrVersion"
        compile "org.mycore:mycore-iiif:$mcrVersion"

        // mycore external
        compile 'org.mycore.sru:sru-adapter:0.0.1-SNAPSHOT'
        compile 'org.mycore.mets:mets-model:0.11-SNAPSHOT'
        compile 'org.mycore.mets:mets-validator:1.3-SNAPSHOT'

        // thulb libs
        compile 'fsu.archiv.mycore.sru:sru-pica-import:0.0.2-SNAPSHOT'

        // external libs
        compile 'javax.servlet:javax.servlet-api:3.1.0'
        compile 'org.apache.logging.log4j:log4j-api:$log4jVersion'
        compile 'org.apache.logging.log4j:log4j-core:$log4jVersion'
        compile "org.glassfish.jersey.test-framework:jersey-test-framework-core:$jerseyVersion"
        compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
        compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
        compile 'org.easymock:easymock:3.2'
        compile 'xmlunit:xmlunit:1.3'
        compile 'javax.xml.bind:jaxb-api:2.2.1'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.1.1'
        compile 'com.google.inject:guice:4.1.0'
        compile 'org.marc4j:marc4j:2.8.2'

        // webjars
        compile 'org.webjars.bower:jquery:2.1.4'
        compile 'org.webjars:jquery-ui:1.11.4'
        compile 'org.webjars:cowwoc-jquery-address:1.6'
        compile 'org.webjars:bootstrap:3.3.4'
        compile 'org.webjars:Eonasdan-bootstrap-datetimepicker:4.15.35'
        compile 'org.webjars.npm:bootstrap-dialog:1.34.6'
        compile 'org.webjars:mustachejs:0.8.2'
        compile 'org.webjars:ckeditor:4.7.0'
        compile 'org.webjars:font-awesome:4.4.0'
        compile 'org.webjars:momentjs:2.10.6'
        compile 'org.webjars:highstock:2.0.4'
    }

}

project(':jportal_acl_ip_editor_module') {
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_derivate_browser') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_move_obj_module') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_doublet_finder_module') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_laws') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_IT-TestData') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

gradle.addListener new WebTestLifecycleListener()

project(':jportal_webapp') {
    apply plugin: 'war'

    configurations {
        applet
        runtime.exclude group: "org.slf4j", module: "slf4j-nop"
        runtime.exclude group: "com.zaxxer", module: "HikariCP-java6"
        websocket
    }

    configurations.all {
      resolutionStrategy {
          force "org.mycore:mycore-viewer:$mcrVersion"
      }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        testCompile "org.hamcrest:hamcrest-library:1.3"
        testCompile 'org.seleniumhq.selenium:selenium-java:2.53.0'
        testCompile "org.mycore:selenium-utils:$seleniumUtilsVersion"

        runtime "org.apache.logging.log4j:log4j-web:$log4jVersion"
        runtime "org.mycore:mycore-xeditor:$mcrVersion"
        runtime "org.mycore:mycore-webcli:$mcrVersion"
        runtime "org.mycore:mycore-acl-editor2:$mcrVersion"
        runtime "org.mycore:mycore-ifs:$mcrVersion"
		runtime "com.zaxxer:HikariCP:2.4.5"
		runtime "org.hibernate:hibernate-hikaricp:$hibernateVersion"
        runtime "org.hibernate:hibernate-ehcache:$hibernateVersion"

        runtime project(':jportal_laws')
        runtime project(':jportal_derivate_browser')
        runtime project(':jportal_doublet_finder_module')
        runtime project(':jportal_move_obj_module')
        runtime project(':jportal_acl_ip_editor_module')
        runtime project(':jportal_mcr_module')
        applet "org.mycore.fileupload:fileupload-applet:1.3-SNAPSHOT"
        websocket 'javax.websocket:javax.websocket-api:1.1'
        websocket "org.eclipse.jetty.websocket:javax-websocket-client-impl:$jettyVersion"
        websocket "org.eclipse.jetty.websocket:javax-websocket-server-impl:$jettyVersion"
    }

    war {
        from(configurations.applet) {
            into 'applet'
            rename 'fileupload-applet(.*).jar', 'upload.jar'
        }

        manifest {
            attributes("Webapp": "$project.name")
            attributes("version": "$project.version")
        }
    }

    // don't run webtests at compile time
    test {
        exclude '**/test'
    }

    task webTests(type: Test, dependsOn: 'test') {
        outputs.upToDateWhen { false }
        include '**/test/*'
        systemProperty "project.build.directory", project.reportsDir
    }

    // Webapp runner tasks
    configurations {
        jetty
        jettyStart
        h2db
        printer
    }

    dependencies {
        jetty "org.eclipse.jetty:jetty-runner:$jettyVersion"
        jettyStart "org.eclipse.jetty:jetty-start:$jettyVersion"
        h2db "com.h2database:h2:1.4.191"
    }

    ext.appName = "jportal"
    ext.mcrHome = System.getProperty("user.home") + "/.mycore"

    ext.appPath = "$mcrHome/$appName"
    ext.confDir = "$project.projectDir/config"
    ext.solrPort = '8391'
    ext.jettyStopPort = '8296'
    ext.jettyStopKey = 'StopJetty'

    task deleteAppPath << {
        delete {
            appPath
        }
    }

    def solrBasePath = Paths.get(projectDir.getAbsolutePath(), "solr");
    def solrZipFile = solrBasePath.resolve("solr-${solrVersion}.zip");
    def solrServerPath = solrBasePath.resolve("server");

    task configApp << {
        // copy config/*
        copy {
            from(confDir) {
                include "**"
                exclude "jetty/**"
            }
            into appPath
        }

        // handle SOLR
        // download
        if(!Files.exists(solrBasePath)) {
            Files.createDirectory(solrBasePath);
        }
        def newVersion = false;
        if(!Files.exists(solrZipFile)) {
            def solrZipURL = "http://apache.mirror.iphh.net/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
            new URL(solrZipURL).withInputStream { is -> solrZipFile.withOutputStream { it << is } }
            newVersion = true;
        }

        // extract
        if(!Files.exists(solrServerPath) || newVersion) {
            if(Files.exists(solrServerPath) && newVersion) {
                println "There is probably a new solr version. Delete old folder..."
                delete solrServerPath.toAbsolutePath().toString()
            }
            println "Solr not installed. Installing into " + solrServerPath + "..."
            Files.createDirectories(solrServerPath);
            def ignoreRootDir = 'solr-' + solrVersion
            copy {
                from zipTree(solrZipFile.toAbsolutePath().toString()).matching {include "$ignoreRootDir/**"}
                into solrServerPath.toAbsolutePath().toString()
                eachFile { fcp ->
                    fcp.path = fcp.path.replaceFirst("^$ignoreRootDir", '')
                }
                includeEmptyDirs false
            }
        }

        // copy additional libs to solr-home
        copy {
            from solrServerPath.toAbsolutePath().toString() + "/contrib/analysis-extras/lib"
            from solrServerPath.toAbsolutePath().toString() + "/contrib/analysis-extras/lucene-libs"
            into appPath + "/solr-home/lib"
        }
    }

    task configWebTests << {
        configurations {
            testData {
                transitive = false
            }
        }

        dependencies {
            testData project(':jportal_IT-TestData')
        }

        copy {
            from configurations.testData.singleFile
            into "$appPath/lib"
        }
    }

    task runH2DB(type: JavaProcess) {
        doFirst {
            def h2DBPath = Paths.get(appPath, "h2db")

            classpath configurations.h2db
            main "org.h2.tools.Server"
            args "-tcp", "-tcpAllowOthers", "-webAllowOthers", "-baseDir", h2DBPath.toString()
        }
    }

    task stopH2DB(type: JavaProcess) {
        classpath configurations.h2db
        main "org.h2.tools.Server"
        args "-tcpShutdown", "tcp://localhost:9092"
    }

    task runSolr(type: Exec) {
        workingDir solrServerPath.toAbsolutePath().toString()
        ignoreExitValue true
        commandLine './bin/solr', 'restart', '-noprompt'
        args '-s', appPath + '/solr-home'
        args '-p', solrPort
    }

    task stopSolr(type: Exec) {
        workingDir solrServerPath.toAbsolutePath().toString()
        ignoreExitValue true
        commandLine './bin/solr', 'stop'
    }

    task runJetty(type: JavaProcess) {
        doFirst {
            systemProperties.put("MCR.Home", mcrHome)
            systemProperties.put("MCR.AppName", "jportal")
            systemProperties.put("URN.log", "$appPath/urnlog")
            classpath configurations.jetty, configurations.h2db, configurations.websocket

            jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8295'
            jvmArgs '-Xmx4096m'

            main "org.eclipse.jetty.runner.Runner"
            args '--config', "$project.projectDir/config/jetty/jetty-config.xml"
            args '--stop-port', jettyStopPort
            args '--stop-key', jettyStopKey
            args '--path', '/jportal', war.archivePath
        }
    }

    task stopJetty(type: JavaProcess) {
        systemProperties.put('STOP.PORT', jettyStopPort)
        systemProperties.put('STOP.KEY', jettyStopKey)
        classpath configurations.jettyStart
        main "org.eclipse.jetty.start.Main"
        args '--stop'
    }

    task runApp {
        dependsOn configApp
        dependsOn runH2DB
        dependsOn runSolr
        dependsOn runJetty
    }

    task stopApp {
        dependsOn stopJetty
        dependsOn stopSolr
        dependsOn stopH2DB
    }
}

class WebTestLifecycleListener implements TaskExecutionListener {

    def servers = [H2DB: 'TCP server running', Solr: 'registerSearcher', Jetty: 'Server:main: Started']

    @Override
    void beforeExecute(Task task) {
        if (task.name == 'webTests' || task.name == 'webTestsApp') {
            def testMCRHome = "${task.project.buildDir}/mcrHome"
            task.project.mcrHome = testMCRHome
            task.project.appPath = "${testMCRHome}/${task.project.appName}"

            task.project.'deleteAppPath'.execute()
            task.project.'configApp'.execute()
            task.project.'configWebTests'.execute()
            servers.each { serverName, forMsg ->
                println "Run $serverName"
                task.project.tasks."run$serverName".ready forMsg
                task.project.tasks."run$serverName".execute()
            }
        }
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        if (task.name == 'webTests') {
            servers.reverseEach { serverName, forMsg ->
                println "Stop $serverName"
                task.project.tasks."stop$serverName".execute()
            }
        }
    }
}

class JavaProcess extends DefaultTask {
    def cmd = ["java", "-cp"]
    def jvmArgs = []
    def classpath = []
    def args = []
    def main = null
    def wait = false
    String ready

    def systemProperties = [:]

    def args(Object... obj) {
        obj.each { o ->
            args.addAll(o.toString())
        }
    }

    def jvmArgs(Object... obj) {
        obj.each { o ->
            jvmArgs.add(o.toString())
        }
    }

    def classpath(FileCollection... fCol) {
        fCol.each { f ->
            classpath.add(f.asPath)
        }
    }

    def classpath(File... path) {
        classpath.addAll(path)
    }

    def main(name) {
        main = name
    }

    def systemProperties() {
        return systemProperties
    }

    def wait(boolean wait) {
        this.wait = wait
    }

    @TaskAction
    def run() {
        cmd.add(classpath.join(File.pathSeparator))
        cmd.addAll(jvmArgs)
        systemProperties.each { k, v ->
            cmd.add("-D$k=$v".toString())
        }
        cmd.add(main)
        cmd.addAll(args)
        def processBuilder = new ProcessBuilder(cmd)

        if (ready == null) {
            processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT)
            processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
        } else {
            processBuilder.redirectErrorStream(true)
        }

        Process process = processBuilder.start()


        if (ready != null) {
            InputStream stdout = process.getInputStream()
            BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

            def line
            while ((line = reader.readLine()) != null) {
                println line
                if (line.contains(ready)) {
                    println "$main is ready"
                    break;
                }
            }
            process.consumeProcessOutput(System.out, System.err)
        }

        if (wait) {
            process.waitForProcessOutput(System.out, System.err)
        }
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.8' }
