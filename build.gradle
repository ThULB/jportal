plugins {
    id "com.moowork.node" version "0.10"
}

import java.nio.file.Paths

def resourcePaths = new HashSet<File>();

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmmss')
    return formattedDate
}

allprojects {
    def releaseURL = "http://artifactory.mycore.de/mycore-releases"
    def snapshotsURL = "http://artifactory.mycore.de/mycore-snapshots"

    repositories {
        mavenLocal()

        maven { url releaseURL }

        maven { url snapshotsURL }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    eclipse {
        jdt {
            sourceCompatibility = javaVersion
            targetCompatibility = javaVersion
        }
        classpath { downloadSources = true }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations { deployerJars }

    if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
        uploadArchives {
            repositories.mavenDeployer {
                repository(url: "http://artifactory.mycore.de/libs-${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}-local") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }
        }
    }

    dependencies {
        testCompile 'org.jmockit:jmockit:1.20'
        testCompile 'junit:junit:4.+'
        testCompile 'com.github.tomakehurst:wiremock:1.+'
        testCompile 'org.apache.logging.log4j:log4j-api:2.3'
        testCompile 'org.apache.logging.log4j:log4j-core:2.3'
        testCompile 'org.seleniumhq.selenium:selenium-java:2.+'
    }

    if (project.name != 'jportal_webapp') {
        resourcePaths.addAll(sourceSets.main.resources.srcDirs);
    }

    test {
        systemProperty "project.buildDir", project.buildDir.absolutePath
    }

    ext.mcrModule = {
        jar {
            manifest {
                attributes("MCR-Application-Module": "$project.name")
                attributes("MCR-Artifact-Id": "$project.name")
                attributes("version": "$project.version")
                attributes("timestamp": getDate())
            }
        }
    }

    jar << {
        copy {
            from "$project.buildDir/tmp/jar"
            include "MANIFEST.MF"
            into "$project.buildDir/resources/main/META-INF"
        }
    }
}

project(':jportal_mcr_module') {
    apply plugin: 'com.moowork.node'

    mcrModule()

    dependencies {
        testCompile 'org.mycore:mycore-base:$mcrVersion:tests'

        compile "org.mycore:mycore-base:$mcrVersion"
        compile "org.mycore:mycore-solr:$mcrVersion"
        compile "org.mycore:mycore-mets:$mcrVersion"
        compile "org.mycore:mycore-iview2:$mcrVersion"
        compile "org.mycore:mycore-user2:$mcrVersion"
        compile "org.mycore:mycore-classeditor:$mcrVersion"
        compile "org.mycore:mycore-mets:$mcrVersion"
        compile "org.mycore:mycore-oai:$mcrVersion"
        compile "org.mycore:mycore-session-listing:$mcrVersion"
        compile "org.mycore:mycore-swf:$mcrVersion"
        compile "org.mycore:mycore-urn:$mcrVersion"
        compile 'org.mycore.sru:sru-adapter:0.0.1-SNAPSHOT'
        compile 'org.mycore.mets:mets-model:0.9-SNAPSHOT'
        compile 'org.mycore.mets:mets-validator:1.2-SNAPSHOT'
        compile 'fsu.archiv.mycore.sru:sru-pica-import:0.0.1-SNAPSHOT'

        // extern libs
        compile 'javax.servlet:javax.servlet-api:3.1.0'
        compile 'org.apache.logging.log4j:log4j-api:2.3'
        compile 'org.apache.logging.log4j:log4j-core:2.3'
        compile "com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:$jerseyVersion"
        compile "com.sun.jersey.contribs:jersey-apache-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-server:$jerseyVersion"
        compile 'org.easymock:easymock:3.2'
        compile 'xmlunit:xmlunit:1.3'
        compile 'javax.xml.bind:jaxb-api:2.2.1'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.1.1'

        // webjars
        compile 'org.webjars.bower:jquery:2.1.4'
        compile 'org.webjars:jquery-ui:1.11.4'
        compile 'org.webjars:cowwoc-jquery-address:1.6'
        compile 'org.webjars:bootstrap:3.3.4'
        compile 'org.webjars:Eonasdan-bootstrap-datetimepicker:4.15.35'
        compile 'org.webjars.npm:bootstrap-dialog:1.34.6'
        compile 'org.webjars:mustachejs:0.8.2'
        compile 'org.webjars:ckeditor:4.5.3'
        compile 'org.webjars:font-awesome:4.4.0'
        compile 'org.webjars:momentjs:2.10.6'
        compile 'org.webjars:highstock:2.0.4'
    }

    def nodeBuildDir = "$project.buildDir/node"

    node {
        // Version of node to use.
        version = '0.11.10'

        // Version of npm to use.
        npmVersion = '2.1.5'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        // Set the work directory where node_modules should be located
        nodeModulesDir = file(nodeBuildDir)
    }

    task npmSetupDir(type: Copy) {
        from 'node'
        include '**/*'
        into nodeBuildDir

        configurations {
            iview
        }
        dependencies {
            iview "org.mycore:mycore-viewer:$mcrViewerVersion"
        }

        into("iview-client") {
            from zipTree(configurations.iview.singleFile)
            include '**/iview-client-base.d.ts', '**/iview-client-mets.d.ts', '**/jquery.d.ts'
            includeEmptyDirs = false
        }
    }
    npmSetup.dependsOn npmSetupDir

    task compileIviewPlugin(type: NodeTask, dependsOn: npmInstall) {
        script = file("$nodeBuildDir/node_modules/grunt-cli/bin/grunt")
        args = ["--gruntfile=$nodeBuildDir/GruntFile.js"]
    }

    task buildIviewPlugin(type: Copy, dependsOn: compileIviewPlugin) {
        from "$nodeBuildDir/classes/META-INF"
        into "$project.buildDir/resources/main/META-INF"
    }

    jar.dependsOn buildIviewPlugin
}

project(':jportal_acl_ip_editor_module') {
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_derivate_browser') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_move_obj_module') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_doublet_finder_module') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_laws') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_IT-TestData') {
    mcrModule()
    dependencies {
        compile project(':jportal_mcr_module')
    }
}

project(':jportal_webapp') {
    apply plugin: 'war'

    configurations {
        applet
        runtime.exclude group: "org.slf4j", module: "slf4j-nop"
    }

    dependencies {
        testCompile 'junit:junit:4.+'
        testCompile "org.apache.logging.log4j:log4j-api:2.3"
        testCompile "org.apache.logging.log4j:log4j-core:2.3"
        testCompile "org.hamcrest:hamcrest-library:1.3"
        testCompile 'org.seleniumhq.selenium:selenium-java:2.+'
        testCompile "org.mycore:mycore-viewer:$mcrViewerVersion:tests"
        testCompile "org.mycore:selenium-utils:$seleniumUtilsVersion"
        runtime "org.apache.logging.log4j:log4j-web:2.3"
        runtime "org.mycore:mycore-xeditor:$mcrVersion"
        runtime "org.mycore:mycore-webcli:$mcrVersion"
        runtime "org.mycore:mycore-acl-editor2:$mcrVersion"
        runtime "org.mycore:mycore-ifs:$mcrVersion"
        runtime "org.hibernate:hibernate-c3p0:$hibernateVersion"
        runtime "org.hibernate:hibernate-ehcache:$hibernateVersion"
        runtime 'com.mchange:c3p0:0.9.5.1'
        runtime project(':jportal_laws')
        runtime project(':jportal_derivate_browser')
        runtime project(':jportal_doublet_finder_module')
        runtime project(':jportal_move_obj_module')
        runtime project(':jportal_acl_ip_editor_module')
        runtime project(':jportal_mcr_module')
        applet "org.mycore.fileupload:fileupload-applet:1.+"
    }

    war {
        from(configurations.applet) {
            into 'applet'
            rename 'fileupload-applet(.*).jar', 'upload.jar'
        }

        manifest {
            attributes("Webapp": "$project.name")
            attributes("version": "$project.version")
        }
    }

    // don't run webtests at compile time
    test {
        exclude '**/test'
    }

    task webTests(type: Test, dependsOn: 'test') {
        outputs.upToDateWhen { false }
        include '**/test/*'
        systemProperty "project.build.directory", project.reportsDir
    }

    // Webapp runner tasks
    configurations {
        jetty
        jettyStart
        h2db
        solrWar
    }

    dependencies {
        jetty "org.eclipse.jetty:jetty-runner:$jettyVersion"
        jettyStart "org.eclipse.jetty:jetty-start:$jettyVersion"
        h2db "com.h2database:h2:1.4.191"
        solrWar "org.mycore.solr:solr:$solrVersion@war"
    }

    def appName = "jportal"
    def mcrHome = System.getProperty("user.home") + "/.mycore"
    def appPath = "$mcrHome/$appName"
    def confDir = "$project.projectDir/config"
    def solrPort = '8391'
    def stopSolrPort = '8395'
    def stopSolrKey = 'StopJpSolr'
    def jettyStopPort = '8296'
    def jettyStopKey = 'StopJetty'


    task configApp(type: Copy) {
        from(confDir) {
            include "**"
            exclude "jetty/**"
        }
        into appPath

        def moduleFiles = project(':jportal_mcr_module').fileTree("src/main/resources").files

        configurations {
            mcrsolr
        }
        dependencies {
            mcrsolr "org.mycore:mycore-solr:$mcrVersion@jar"
        }

        into("solr-home") {
            from moduleFiles
            include '**/solr.xml'
        }

        into("solr-home/conf") {
            from moduleFiles
            include '**/schema.xml', '**/solrconfig.xml', '**/stopwords.txt'
            from({ zipTree(configurations.mcrsolr.singleFile).files }) {
                include 'classificationSchema.xml'
            }
        }
    }

    task runH2DB(type: JavaProcess) {
        def h2DBPath = Paths.get(mcrHome, appName, "h2db")

        classpath configurations.h2db
        main "org.h2.tools.Server"
        args "-tcp", "-baseDir", h2DBPath.toString()
    }

    task stopH2DB(type: JavaProcess) {
        classpath configurations.h2db
        main "org.h2.tools.Server"
        args "-tcpShutdown", "tcp://localhost:9092"
    }

    task runSolr(type: JavaProcess) {
        systemProperties.put("solr.solr.home", "$appPath/solr-home")
        classpath configurations.jetty
        main "org.eclipse.jetty.runner.Runner"
        args '--port', solrPort
        args '--stop-port', stopSolrPort
        args '--stop-key', stopSolrKey
        args '--path', '/solr', configurations.solrWar.singleFile
    }

    task stopSolr(type: JavaProcess) {
        systemProperties.put('STOP.PORT', stopSolrPort)
        systemProperties.put('STOP.KEY', stopSolrKey)
        classpath configurations.jettyStart
        main "org.eclipse.jetty.start.Main"
        args '--stop'
    }

    task runJetty(type: JavaProcess) {
        systemProperties.put("MCR.AppName", "jportal")
        systemProperties.put("URN.log", "$appPath/urnlog")
        classpath configurations.jetty, configurations.h2db

        jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8295'
        jvmArgs '-Xmx2048m'

        main "org.eclipse.jetty.runner.Runner"
        args '--config', "$project.projectDir/config/jetty/jetty-config.xml"
        args '--stop-port', jettyStopPort
        args '--stop-key', jettyStopKey
        args '--path', '/jportal', war.archivePath
    }

    task stopJetty(type: JavaProcess) {
        systemProperties.put('STOP.PORT', jettyStopPort)
        systemProperties.put('STOP.KEY', jettyStopKey)
        classpath configurations.jettyStart
        main "org.eclipse.jetty.start.Main"
        args '--stop'
    }

    task runApp {
        dependsOn configApp
        dependsOn runH2DB
        dependsOn runSolr
        dependsOn runJetty
    }

    task stopApp {
        dependsOn stopJetty
        dependsOn stopSolr
        dependsOn stopH2DB
    }
}

class JavaProcess extends DefaultTask {
    def cmd = ["java", "-cp"]
    def jvmArgs = []
    def classpath = []
    def args = []
    def main = null
    def wait = false

    def systemProperties = [:]

    def args(Object... obj) {
        obj.each { o ->
            args.addAll(o.toString())
        }
    }

    def jvmArgs(Object... obj) {
        obj.each { o ->
            jvmArgs.add(o.toString())
        }
    }

    def classpath(FileCollection... fCol) {
        fCol.each { f ->
            classpath.add(f.asPath)
        }
    }

    def main(name) {
        main = name
    }

    def systemProperties() {
        return systemProperties
    }

    def wait(boolean wait) {
        this.wait = wait
    }

    @TaskAction
    def run() {
        cmd.add(classpath.join(File.pathSeparator))
        cmd.addAll(jvmArgs)
        systemProperties.each { k, v ->
            cmd.add("-D$k=$v".toString())
        }
        cmd.add(main)
        cmd.addAll(args)
        println cmd.join(' ')
        def processBuilder = new ProcessBuilder(cmd)

        processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT)
        processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
        def start = processBuilder.start()

        if (wait) {
            start.waitForProcessOutput(System.out, System.err)
        }
    }
}

def getAgentOp(resourcePaths) {
    def agentOp
    for (path in resourcePaths) {
        if (agentOp == null) {
            agentOp = path.toString()
        } else {
            agentOp = agentOp + "," + path
        }
    }
    return agentOp;
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.8' }
