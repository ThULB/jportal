// Test IntelliJ
import java.io.File;
import java.util.HashSet;

def mcrVersion = '2015.03-SNAPSHOT'
def jettyVersion = "9.2.7.v20150116"
def jerseyVersion = "1.19"
def hibernateVersion = "4.3.4.Final"

def resourcePaths = new HashSet<File>();

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmmss')
    return formattedDate
}

allprojects{
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    eclipse {
        jdt {
            sourceCompatibility = 1.7
            targetCompatibility = 1.7
        }
        classpath { downloadSources=true }
    }

    def group = "fsu.thulb"
    def version = "2.0.18-SNAPSHOT"
    def releaseURL = "http://artifactory.mycore.de/mycore-releases"
    def snapshotsURL = "http://artifactory.mycore.de/mycore-snapshots"

    repositories {
        mavenLocal()

        maven{ url releaseURL }

        maven{ url snapshotsURL }
    }

    configurations { deployerJars }

    dependencies { deployerJars "org.apache.maven.wagon:wagon-http:2.8" }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "scp://repos.mycompany.com/releases") {
                authentication(userName: "me", password: "myPassword")
            }
        }
    }

    dependencies{
        testCompile 'junit:junit:4.+'
        testCompile "log4j:log4j:1.2.17"
        testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.+'
    }
}

def mcrComplDep = [
    "org.mycore:mycore-base:$mcrVersion",
    "org.mycore:mycore-solr:$mcrVersion",
    "org.mycore:mycore-mets:$mcrVersion",
    "org.mycore:mycore-iview2:$mcrVersion",
    "org.mycore:mycore-user2:$mcrVersion",
    "org.mycore:mycore-classeditor:$mcrVersion",
    "org.mycore:mycore-mets:$mcrVersion",
    "org.mycore:mycore-oai:$mcrVersion",
    "org.mycore:mycore-session-listing:$mcrVersion",
    "org.mycore:mycore-swf:$mcrVersion",
    'org.mycore.legacy:mycore-legacy-search:1.0-SNAPSHOT',
    'org.mycore.sru:sru-adapter:0.0.1-SNAPSHOT',
    'org.mycore.mets:mets-model:0.6-SNAPSHOT',
    'org.mycore.mets:mets-validator:1.1-SNAPSHOT',
    'javax.servlet:javax.servlet-api:3.1.0',
    'fsu.archiv.mycore.sru:sru-pica-import:0.0.1-SNAPSHOT'
]



subprojects {

    def noMCRDep = [
        "jportal_jetty_tools",
        "jportal_web_tests",
        "java_agent"
    ]

    if (!(project.name in noMCRDep)) {
        dependencies{
            mcrComplDep.each{dep -> compile dep }
        }
    }

    def noJPModuleDep = [
        "jportal-commons",
        "jportal_ext_web_lib",
        "jportal_iview2_plugin",
        "jportal_emb_hsql",
        "jportal_jetty_tools",
        "java_agent",
        "jportal_web_tests"
    ]

    if(project.name != 'jportal_mcr_module' && !(project.name in noJPModuleDep)){
        dependencies{ compile project(':jportal_mcr_module') }
    }

    def mcrModule = [
        "jportal_mcr_module",
        "jportal_derivate_browser",
        "jportal_move_obj_module",
        "jportal_laws",
        "jportal_doublet_finder_module"
    ]

    if(project.name in mcrModule){
        println "MCRModule $project.name"
        jar {
            manifest {
                attributes("MCR-Application-Module": "$project.name")
                attributes("MCR-Artifact-Id": "$project.name")
                attributes("version": "$project.version")
                attributes("timestamp": getDate())
            }
        }
    }
    resourcePaths.addAll(sourceSets.main.resources.srcDirs);
}

project(':jportal_mcr_module'){
    configurations{ iview }

    dependencies{
        compile project(':jportal-commons')
        compile project(':jportal_ext_web_lib')
        compile project(':jportal_iview2_plugin')
        compile 'de.uni-jena.thulb:JPJaxbPojos:0.0.1-SNAPSHOT'
        compile 'de.uni-jena.thulb.oai:archive-oai-resources:0.0.1-SNAPSHOT'
        compile 'log4j:log4j:1.2.17'
        compile "com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:$jerseyVersion"
        compile "com.sun.jersey.contribs:jersey-apache-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-client:$jerseyVersion"
        compile "com.sun.jersey:jersey-server:$jerseyVersion"
        compile 'org.easymock:easymock:3.2'
        compile 'xmlunit:xmlunit:1.3'
        compile 'javax.xml.bind:jaxb-api:2.2.1'
        compile 'com.sun.xml.bind:jaxb-impl:2.2.1.1'
        iview 'org.mycore:mycore-viewer:0.2-SNAPSHOT'
    }

    def gruntBuildDir = "$project.buildDir/grunt"
    processResources.doFirst{
        copy {
            from 'grunt'
            include '**/*'
            into gruntBuildDir
        }

        def iviewJar
        configurations.iview.each{ file ->
            iviewJar = file.absolutePath
        }
        copy {
            from zipTree(iviewJar)
            include '**/iview-client-base.d.ts', '**/iview-client-mets.d.ts', '**/jquery.d.ts'
            into "$gruntBuildDir/iview-client"
            includeEmptyDirs = false
        }

        exec {
            workingDir gruntBuildDir
            commandLine 'npm', 'install'
        }

        exec {
            workingDir gruntBuildDir
            commandLine "node_modules/grunt-cli/bin/grunt"
        }
    }

    processResources {
        from("$gruntBuildDir/classes/META-INF") { into 'META-INF' }
        from("$project.buildDir/templateName.xml") { into 'META-INF/resources/templates' }
    }
}

//project(':jportal_web_tests'){
//    dependencies{
//        testCompile 'org.seleniumhq.selenium:selenium-java:2.44.0'
//    }
//
//    test {
//        beforeTest{
//
//        }
//    }
//}

project(':jportal_webapp'){
    apply plugin: 'war'

    configurations {
        jetty
        solr
        applet
        agent
    }

    dependencies {
        runtime "org.mycore:mycore-xeditor:$mcrVersion"
        runtime "org.mycore:mycore-webcli:$mcrVersion"
        runtime "org.mycore:mycore-acl-editor2:$mcrVersion"
        runtime "org.mycore:mycore-ifs:$mcrVersion"
        runtime "org.hibernate:hibernate-c3p0:$hibernateVersion"
        runtime "org.hibernate:hibernate-ehcache:$hibernateVersion"
        runtime 'com.mchange:c3p0:0.9.2.1'
        runtime project(':jportal_laws')
        runtime project(':jportal_derivate_browser')
        runtime project(':jportal_doublet_finder_module')
        runtime project(':jportal_move_obj_module')
        applet "org.mycore.fileupload:fileupload-applet:1.2-SNAPSHOT"
    }

    war {
        from(configurations.applet){
            into 'applet'
            rename 'fileupload-applet(.*).jar', 'upload.jar'
        }
//        from {
//            configurations.executableWarDeps.collect {
//                it.isDirectory() ? it : project.zipTree(it)
//            }
//        }
//
//        from("$buildDir/classes/main"){ include "**/JettyRun.class" }

        manifest {
            attributes("Webapp": "$project.name")
            attributes("version": "$project.version")
//            attributes("Main-Class": "fsu.thulb.jetty.JettyRun")
        }
    }
}

task runJetty(type: JavaExec){
    configurations {
        jetty
        solr
    }
    description = "run the jetty"
    dependencies {
        jetty("org.eclipse.jetty:jetty-runner:$jettyVersion"){ exclude group: 'org.ow2.asm' }
        jetty project(':jportal_jetty_tools')
        jetty project(':java_agent')
        solr "org.mycore.solr:solr:4.7.2@war"
    }

    def solrWarFilePath
    configurations.solr.each { File file -> solrWarFilePath = file.absolutePath }

    def agentOp
    for(path in resourcePaths){
        if(agentOp == null){
            agentOp = path.toString()
        }else {
            agentOp = agentOp + "," + path
        }
    }

    main = "org.eclipse.jetty.runner.Runner"
    systemProperties.put("MCR.AppName","jportal")
    jvmArgs '-Xdebug'
    jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8295'
    jvmArgs "-javaagent:" + project(':java_agent').tasks.getByPath(':java_agent:jar').archivePath+"=$agentOp"
    jvmArgs '-XX:MaxPermSize=128m'
    args '--config', 'jetty/jetty-config.xml'
    args '--stop-port', '8181'
    args '--stop-key', 'stop'
    args '--path', '/solr', solrWarFilePath
    args '--path', '/jportal', project(':jportal_webapp').tasks.getByPath(':jportal_webapp:war').archivePath
    classpath configurations.jetty
}

task stopJetty(type: Exec){
    configurations { jettystartJar }
    description = "stop the jetty"

    dependencies { jettystartJar "org.eclipse.jetty:jetty-start:$jettyVersion" }

    def jettyStart
    configurations.jettystartJar.each { File file -> if(file.absolutePath.contains("jetty-start")) jettyStart = file.absolutePath }

    executable "java"
    args '-jar', jettyStart//, '--stop-port 8181', '--stop-key stop', '--stop'
    args '-DSTOP.PORT=8181'
    args '-DSTOP.KEY=stop'
    //    args '--stop-port', '8181'
    //    args '--stop-key', 'stop'
    args '--stop'
    //    args '--help'
}

task hello(type: Exec){
    configurations {
        jetty_
        solr_
    }
    
    description = "Hello Jetty"
    
    dependencies {
        jetty_ project(':java_agent')
        solr_ "org.mycore.solr:solr:4.7.2@war"
    }

    def solrWarFilePath
    configurations.solr_.each { File file -> solrWarFilePath = file.absolutePath }

    def agentOp
    for(path in resourcePaths){
        if(agentOp == null){
            agentOp = path.toString()
        }else {
            agentOp = agentOp + "," + path
        }
    }
    
    executable "java"
    args '-jar', project(':jportal_jetty_tools').tasks.getByPath(':jportal_jetty_tools:jar').archivePath
    args "--path /solr " + solrWarFilePath
    args "--path /jportal " + project(':jportal_webapp').tasks.getByPath(':jportal_webapp:war').archivePath
}

project(':jportal_jetty_tools'){
    //    project.ext.needMCR = false
    configurations {
        solr
        executableWarDeps{ extendsFrom compile }
    }

    dependencies{
        //                    compile "org.mycore:mycore-base:$mcrVersion"
        compile "org.eclipse.jetty:jetty-server:$jettyVersion"
        executableWarDeps "org.eclipse.jetty:jetty-server:$jettyVersion"
        compile "org.eclipse.jetty:jetty-security:$jettyVersion"
        executableWarDeps "org.eclipse.jetty:jetty-security:$jettyVersion"
        compile "org.eclipse.jetty:jetty-plus:$jettyVersion"
        executableWarDeps "org.eclipse.jetty:jetty-plus:$jettyVersion"
        compile 'org.hsqldb:hsqldb:2.3.2'
        compile 'javax.servlet:javax.servlet-api:3.0.1'
        compile 'log4j:log4j:1.2.17'
        compile "org.eclipse.jetty:jetty-webapp:$jettyVersion"
        solr "org.mycore:mycore-solr:$mcrVersion@jar"
    }

    def solrBuildDir = "$project.buildDir/solr"
    processResources.doFirst{
        def solrJar
        configurations.solr.each{ file ->
            solrJar = file.absolutePath
            println "Solr Jar $solrJar";
        }
        copy {
            from zipTree(solrJar).files
            include 'classificationSchema.xml'
            into solrBuildDir
            includeEmptyDirs = false
        }

        copy {
            from project(':jportal_mcr_module').fileTree("src/main/resources").files
            include '**/solr.xml', '**/schema.xml', '**/solrconfig.xml', '**/stopwords.txt'
            into solrBuildDir
            includeEmptyDirs = false
        }
    }
    processResources {
        from("$solrBuildDir") {
            include 'classificationSchema.xml', 'schema.xml', 'solrconfig.xml', 'stopwords.txt'
            into 'config/jportal_jetty_tools/solr/solr-home/conf'
        }

        from("$solrBuildDir") {
            include 'solr.xml'
            into 'config/jportal_jetty_tools/solr/solr-home'
        }
    }
    
    jar {
        from {
            configurations.executableWarDeps.collect {
                it.isDirectory() ? it : project.zipTree(it)
            }
        }

//        from("$buildDir/classes/main"){ include "**/JettyRun.class" }

        manifest {
//            attributes("Webapp": "$project.name")
//            attributes("version": "$project.version")
            attributes("Main-Class": "fsu.thulb.jetty.JettyRun")
        }
    }
}

configurations.all {
    resolutionStrategy{
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

task wrapper(type: Wrapper){ gradleVersion = '2.2.1' }
