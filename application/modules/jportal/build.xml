<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="MyCoReModule - JPortal" default="usage" basedir="../..">

	<property name="build.sysclasspath" value="last" />
	<import file="${basedir}/common-modules.xml" />
	<property name="env.MYJPORTAL_HOME" value="${basedir}/../myjportal/modules/jportal" />
	<property name="env.JPORTAL_HOME" value="${basedir}/modules/jportal" />
	<property name="module.base" value="jportal" />
	<property name="module.dir" value="${basedir}/modules/${module.base}" />
	<property name="objectTypes" value="person,jpinst,jpjournal,jpvolume,jparticle" />

	<!-- ============================================== -->
	<target name="usage">
		<echo>
          Usage:
            ant [target]

          All targets are internal, use $Docportal/jportal-build.xml

        </echo>
	</target>
	<!-- ============================================== -->
	<target name="jar">
		<if>
			<isset property="MCR.System.SharedJarsDir" />
			<then>
				<copy todir="${build.lib}" preservelastmodified="true">
					<fileset dir="${MCR.System.SharedJarsDir}" includes="*.jar" />
				</copy>
			</then>
		</if>
	</target>

	<target name="create.scripts">
		<echo level="info">
	            building ${ant.project.name} create.scripts
	        </echo>
		<!-- Copy scripts -->
		<chmod perm="755">
			<fileset dir="${build.bin}" includes="*.sh" />
		</chmod>

	</target>

	<!-- =================================================================== -->
	<!-- Create schemas					                                     -->
	<!-- =================================================================== -->
	<!--<target name="jp.create.schema" depends="create.schema">-->
	<target name="create.schema">
		<!-- Translate *.xml to *.xsd using MCRMetadataSchema.xsl -->
		<for list="${objectTypes}" param="objectType" parallel="true">
			<sequential>
				<if>
					<available file="${module.dir}/config/datamodel2/@{objectType}.xml" />
					<then>
						<xslt style="${module.dir}/xsl/objecttype.xsl" in="${module.dir}/config/datamodel2/@{objectType}.xml" out="build/schema/datamodel-@{objectType}.xsd" />
					</then>
					<else>
						<antcall target="model2schema">
							<param name="metadata.schema" value="${module.dir}/config/datamodel/@{objectType}.xml" />
						</antcall>
					</else>
				</if>
			</sequential>
		</for>
	</target>

	<target name="config">
		<!-- merge mycore.properties-->
		<mcr-config propertyfile="${build.config}/mycore.properties" mergeFile="${env.JPORTAL_HOME}/config/mycore.properties" />
		<mcr-config propertyfile="${build.config}/mycore.properties" mergeFile="${env.MYJPORTAL_HOME}/config/mycore.properties" />

		<!-- merge searchfields.xml -->
		<xmltask source="${build.config}/searchfields.xml" dest="${build.config}/searchfields.xml">
			<insert path="/:searchfields/:index[1]/:field[8]" position="after" file="${module.dir}/config/searchfields-metadata.xml" />
			<insert path="/:searchfields/:index[2]/:field[3]" position="after" file="${module.dir}/config/searchfields-content.xml" />
		</xmltask>
		<replace file="${build.config}/searchfields.xml" token='xmlns=""' />

		<!-- add cli commands -->
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRJournalSummary" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRJPortalCommands" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRDeadLinkFinder" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRObjectTools" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRUsersGroupsTools" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRClassificationTools" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRDuplicateCommands" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRJPortalPageGenCommands" />
		<mcr-config action="addInclude" propertyfile="${build.config}/mycore.properties" key="MCR.CLI.Classes.Internal" value="org.mycore.frontend.cli.MCRContentTools" />
	</target>

	<!-- =================================================================== -->
	<!-- create directories   		                                         -->
	<!-- =================================================================== -->
	<target name="create.directories" depends="init" description="Creates directory structure">
		<modulePreHook target="create.directories" />
		<!-- recycle bin dir -->
		<mkdir dir="${MCR.recycleBinExportDir}" />
		<!-- doublet finder dir -->
		<mkdir dir="${MCR.doubletFinder}" />

		<!-- create mcr directories for object types -->
		<for list="${objectTypes}" param="objectType" parallel="true">
			<sequential>
				<mkdir dir="${MCR.SWF.Directory.@{objectType}}" />
			</sequential>
		</for>

	</target>

	<!-- ============================================== -->

	<target name="create.webapp">
		<echo>
            Start building JPortal webapp
        </echo>

		<!-- jportal -->
		<echo>
	         building JPortal webapp
	    </echo>
		<antcall target="jp.webapps.inside">
			<param name="JPortal.HomeURL" value="${env.JPORTAL_HOME}" />
		</antcall>

		<!-- copy editors -->
		<copy todir="${build.webapps}/editor" flatten="true" preservelastmodified="true">
			<fileset dir="${env.JPORTAL_HOME}/config/editor" includes="**/*.xml" excludes="**/editor_default_acls*.xml" />
			<fileset dir="${env.JPORTAL_HOME}/config/editor" includes="editor-*.xml" />
			<fileset dir="${env.JPORTAL_HOME}/config/editor" includes="imports-*.xml" />
		</copy>

		<!-- generate swf pages -->
		<antcall target="genSWFPage" />

		<!-- MyJPortal -->
		<echo>
	         building MyJPortal webapp
	    </echo>
		<antcall target="jp.webapps.inside">
			<param name="JPortal.HomeURL" value="${env.MYJPORTAL_HOME}" />
		</antcall>

		<!-- Registering templates -->
		<echo>
             building JPortal webapp - Registering templates
        </echo>
		<taskdef name="templatecheck" classname="org.mycore.common.MCRTemplateTask" classpathref="application.classpath" />
		<templatecheck templatepath="${build.webapps}/templates/master/" choosepath="${build.webapps}/WEB-INF/classes/xsl/chooseTemplate.xsl" />

	</target>


	<!-- ============================================== -->

	<target name="jp.webapps.inside">

		<!-- file mappings config -->
		<copy todir="${build.webapps}">
			<fileset dir="${JPortal.HomeURL}/config" includes="FileContentTypes.xml" />
			<fileset dir="${JPortal.HomeURL}/config" includes="fileMappings.xml" />
		</copy>

		<!-- web.xml -->
		<available property="web.xml.present" file="${JPortal.HomeURL}/config/web.xml" />
		<antcall target="do.merge">
			<param name="web.xml.file" value="${JPortal.HomeURL}/config/web.xml" />
		</antcall>

		<!-- webpages stuff -->
		<antcall target="jp.webapps.copyWebPages">
			<param name="sourcedir.webpages" value="${JPortal.HomeURL}/webpages" />
		</antcall>

		<!-- xsl -->
		<antcall target="jp.webapps.copyXSL">
			<param name="sourcedir.XSL" value="${JPortal.HomeURL}/stylesheets" />
		</antcall>

		<!-- templates  -->
		<copy todir="${build.webapps}/webpages/templates" failonerror="false">
			<fileset dir="${JPortal.HomeURL}/webpages/templates/" />
		</copy>
		<antcall target="jp.webapps.copyXSL">
			<param name="sourcedir.XSL" value="${JPortal.HomeURL}/webpages/templates/" />
		</antcall>

	</target>

	<!-- ============================================== -->
	
	<target name="genSWFPage">
		<property name="stylesheet" value="${module.dir}/config/swf-page.xsl" />
		<property name="template" value="${module.dir}/config/swf-template.xml" />
		<property name="titleuri" value="${module.dir}/config/swf-titles.xml" />

		<for list="${objectTypes}" param="objectType">
			<sequential>
				<for list="author,commit,editor" param="step">
					<sequential>
						<if>
							<uptodate targetfile="${build.webapps}/editor_form_@{step}-@{objectType}.xml">
								<srcfiles file="${template}" />
								<srcfiles file="${stylesheet}" />
								<srcfiles file="${titleuri}" />
							</uptodate>
							<else>
								<xslt basedir="${module.dir}" classpathref="application.classpath" in="${template}" style="${stylesheet}" out="${build.webapps}/editor_form_@{step}-@{objectType}.xml">
									<param name="objectType" expression="@{objectType}" />
									<param name="step" expression="@{step}" />
									<param name="titleuri" expression="${titleuri}" />
								</xslt>
							</else>
						</if>
					</sequential>
				</for>
				<if>
					<available file="${module.dir}/config/editor/@{objectType}/editor_default_acls_@{objectType}.xml" />
					<then>
						<copy tofile="${build.webapps}/WEB-INF/classes/editor_default_acls_@{objectType}.xml" file="${module.dir}/config/editor/@{objectType}/editor_default_acls_@{objectType}.xml" preservelastmodified="true" />
					</then>
					<else>
						<copy tofile="${build.webapps}/WEB-INF/classes/editor_default_acls_@{objectType}.xml" file="${module.dir}/config/editor/editor_default_acls.xml" preservelastmodified="true" />
					</else>
				</if>
			</sequential>
		</for>
	</target>
	
	<!-- =================================================================== -->

	<target name="i18n">
		<echo level="info">
            building ${ant.project.name} webapp.i18n
        </echo>

		<!-- i18n -->
		<antcall target="properties.merge">
			<param name="module" value="${module.dir}/config/messages_de.properties" />
			<param name="locale_param" value="de" />
		</antcall>
		<antcall target="properties.merge">
			<param name="module" value="${module.dir}/config/messages_en.properties" />
			<param name="locale_param" value="en" />
		</antcall>
		<antcall target="properties.merge">
			<param name="module" value="${module.dir}/config/messages_pl.properties" />
			<param name="locale_param" value="pl" />
		</antcall>

		<antcall target="properties.merge">
			<param name="module" value="${env.MYJPORTAL_HOME}/config/messages_de.properties" />
			<param name="locale_param" value="de" />
		</antcall>
		<antcall target="properties.merge">
			<param name="module" value="${env.MYJPORTAL_HOME}/config/messages_en.properties" />
			<param name="locale_param" value="en" />
		</antcall>
	</target>

	<!-- =================================================================== -->

	<!-- create a new template_DynamicLayoutTemplates.xsl 
	<target name="jp.webapps.dynamicLayoutTemplates">
		<taskdef name="templatecheck" classname="org.mycore.common.MCRDynamicLayoutTemplatesTask" classpathref="application.classpath" />
		<templatecheck choosepath="${build.webapps}/WEB-INF/classes/xsl/template_DynamicLayoutTemplates.xsl" />
	</target>
    -->

	<!-- =================================================================== -->

	<target name="jp.webapps.copyWebPages">
		<!-- webpages stuff to "webapps" -->
		<copy todir="${build.webapps}" failonerror="false">
			<fileset dir="${sourcedir.webpages}" excludes="**/*.xsl" />
		</copy>
	</target>
	<!-- =================================================================== -->

	<target name="jp.webapps.copyXSL">
		<copy todir="${build.webapps}/WEB-INF/classes/xsl" flatten="true" failonerror="false">
			<fileset dir="${sourcedir.XSL}" includes="**/*.xsl" />
		</copy>
	</target>
	<!-- =================================================================== -->

	<target name="compile">
		<echo>Compiling JPortal classes...</echo>
		<antcall target="javac">
			<param name="packages" value="org/mycore/**" />
		</antcall>
	</target>

	<!-- =================================================================== -->

	<target name="javac" depends="init">
		<echo>Compiling ${packages}</echo>
		<javac srcdir="${env.JPORTAL_HOME}/sources" destdir="${build.classes}" includes="${packages}" classpathref="bootstrap.classpath" debug="${debug}" optimize="${optimize}" target="${javatarget}" source="${sourcerelease}" encoding="${sourceencoding}" deprecation="${deprecation}">
		</javac>
	</target>

	<!-- =================================================================== -->

	<!--
	<target name="init">
		<mkdir dir="${basedir}/classes" />
		<path id="mycore.classpath">
			<fileset dir="${basedir}/lib" includes="*.jar" />
			<fileset dir="${env.MYCORE_HOME}/lib" includes="*.jar" />
		</path>
	</target>
    -->

	<!-- =================================================================== -->

</project>
