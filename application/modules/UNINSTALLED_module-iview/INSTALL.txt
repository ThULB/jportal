## ============================================== 
##  												
## Image Viewer - MCR-IView 1.0, 05-2006  		
## +++++++++++++++++++++++++++++++++++++			
##  												
## Andreas Trappe 	- concept, devel. in misc.  
## Britta Kapitzki	- Design					
## Thomas Scheffler   - html prototype		    
## Stephan Schmidt 	- html prototype			
##
## $Revision: 1.7 $ $Date: 2006/09/18 14:36:52 $ 
## 
## ============================================== 

Quick installation guide
========================
========================

1. Requirements
2. Installation
3. Usage
4. Example

1. Requirements
========================

- "MyCoRe Module-Imaging" must be installed 
-- see $MYCORE_HOME/modules/UNINSTALLED_module-imaging/install.txt


Installation 
================

Go to uninstalled module folder
- cd $DOCPORTAL_HOME/modules/UNINSTALLED_module-iview
 
Install
- ant install
   
Add property 
- cp $DOCPORTAL_HOME/modules/module-iview/config/mycore.properties.iview.template $DOCPORTAL_HOME/modules/module-iview/config/mycore.properties.iview

Customize property
- vi $DOCPORTAL_HOME/modules/module-iview/config/mycore.properties.iview

- Plug-In
-- cd $DOCPORTAL_HOME
-- ant jar webapps


Usage
================

You can use MCR-IView in two ways within your DocPortal web application. 

1. Via XSL

   a) Include $DOCPORTAL_HOME/modules/module-iview/xsl/mcr-module-iview-$CurrentLang.xsl 
      in the XSL-Stylesheet where MCR-IView shall be displayed.

   b) Verify if the derivate contains by MCR-IView supported files (images) by:
   
               <xsl:variable name="mainFile">
                  	<xsl:call-template name="iview.getSupport">
                  		<xsl:with-param name="derivID" select="$derivateID" />
                  	</xsl:call-template>			
                  </xsl:variable>	

	  --> If mainFile is not '' -> supported files are found and 
	      $mainFile contains the first image that have been found 

   c) embedd MCRIView in XSL  by
		<xsl:call-template name="iview">
			<xsl:param name="derivID" /> name of ownerID
			<xsl:param name="pathOfImage" /> path to image
			<xsl:param name="height" /> height of viewer (or image in case display = image)
			<xsl:param name="width" /> width of viewer (or image in case display = image)
			<xsl:param name="scaleFactor" /> fitToWidth | fitToScreen | 0.1 <=> 1.0
			<xsl:param name="display" /> image | minimal | normal | extended
			<xsl:param name="style" /> only necessary if $display!='image' -> image | thumbnail | text
		</xsl:call-teamplate>
		
2. Via MyCoRe-XML-Webpage

   Just call the following node from any MyCoRe-XML-WebPage
   
		<iview
			@derivid (name of ownerID)
			@pathofimage (path to image)
			@height (height of viewer (or image in case display = image) )
			@width (width of viewer (or image in case display = image) )
			@scalefactor ( fitToWidth | fitToScreen | 0.1 <=> 1.0 )
			@display (image | minimal | normal | extended )
			@style (only necessary if $display!='image' -> image | thumbnail | text) 
			>
		</iview>	


4. Example
================

In DocPortal is already example code included. Watch 
$DOCPORTAL_HOME/stylesheets/document.xsl 

- activate incude statement of mcr-module-startIview.xsl 
- activate whole block code starting with "<!-#- MCR-IView ..start -#->" that is commented

--> Now you should see the image viewer on Metadata-Page of type 
document in case the derrivat's main file is supported