package de.fsu.org.instrumentation;

import static org.objectweb.asm.Opcodes.AALOAD;
import static org.objectweb.asm.Opcodes.AASTORE;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ARRAYLENGTH;
import static org.objectweb.asm.Opcodes.ASM5;
import static org.objectweb.asm.Opcodes.ASTORE;
import static org.objectweb.asm.Opcodes.ATHROW;
import static org.objectweb.asm.Opcodes.DUP;
import static org.objectweb.asm.Opcodes.F_APPEND;
import static org.objectweb.asm.Opcodes.F_CHOP;
import static org.objectweb.asm.Opcodes.F_SAME;
import static org.objectweb.asm.Opcodes.F_SAME1;
import static org.objectweb.asm.Opcodes.GETFIELD;
import static org.objectweb.asm.Opcodes.GETSTATIC;
import static org.objectweb.asm.Opcodes.GOTO;
import static org.objectweb.asm.Opcodes.ICONST_0;
import static org.objectweb.asm.Opcodes.ICONST_1;
import static org.objectweb.asm.Opcodes.IFEQ;
import static org.objectweb.asm.Opcodes.IFGE;
import static org.objectweb.asm.Opcodes.IFLE;
import static org.objectweb.asm.Opcodes.IFNONNULL;
import static org.objectweb.asm.Opcodes.IFNULL;
import static org.objectweb.asm.Opcodes.IF_ICMPLT;
import static org.objectweb.asm.Opcodes.ILOAD;
import static org.objectweb.asm.Opcodes.INTEGER;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKESTATIC;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.ISTORE;
import static org.objectweb.asm.Opcodes.LALOAD;
import static org.objectweb.asm.Opcodes.LASTORE;
import static org.objectweb.asm.Opcodes.LCMP;
import static org.objectweb.asm.Opcodes.LLOAD;
import static org.objectweb.asm.Opcodes.LONG;
import static org.objectweb.asm.Opcodes.LSTORE;
import static org.objectweb.asm.Opcodes.LSUB;
import static org.objectweb.asm.Opcodes.NEW;
import static org.objectweb.asm.Opcodes.PUTFIELD;
import static org.objectweb.asm.Opcodes.RETURN;

import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;

public class MCRXSLTransformerVisitor extends ClassVisitor{

    public MCRXSLTransformerVisitor(ClassVisitor cw) {
        super(ASM5, cw);
    }
    
    @Override
    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
        super.visit(version, access, name, signature, superName, interfaces);
    }
    
    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
        
        if (mv != null && "checkTemplateUptodate".equals(name)) {
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(156, l0);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "modifiedChecked", "J");
            mv.visitInsn(LSUB);
            mv.visitFieldInsn(GETSTATIC, "org/mycore/common/content/transformer/MCRXSLTransformer", "CHECK_PERIOD", "J");
            mv.visitInsn(LCMP);
            Label l1 = new Label();
            mv.visitJumpInsn(IFLE, l1);
            mv.visitInsn(ICONST_1);
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitFrame(F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l2);
            mv.visitFrame(F_SAME1, 0, null, 1, new Object[] {INTEGER});
            mv.visitVarInsn(ISTORE, 1);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(157, l3);
            mv.visitVarInsn(ILOAD, 1);
            Label l4 = new Label();
            mv.visitJumpInsn(IFEQ, l4);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(158, l5);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 2);
            Label l6 = new Label();
            mv.visitLabel(l6);
            Label l7 = new Label();
            mv.visitJumpInsn(GOTO, l7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(159, l8);
            mv.visitFrame(F_APPEND,2, new Object[] {INTEGER, INTEGER}, 0, null);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);
            mv.visitVarInsn(LSTORE, 3);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(160, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "templates", "[Ljavax/xml/transform/Templates;");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(AALOAD);
            Label l10 = new Label();
            mv.visitJumpInsn(IFNULL, l10);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "modified", "[J");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(LALOAD);
            mv.visitVarInsn(LLOAD, 3);
            mv.visitInsn(LCMP);
            Label l11 = new Label();
            mv.visitJumpInsn(IFGE, l11);
            mv.visitLabel(l10);
            mv.visitLineNumber(161, l10);
            mv.visitFrame(F_APPEND,1, new Object[] {LONG}, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "templateSources", "[Lorg/mycore/common/xsl/MCRTemplatesSource;");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKEVIRTUAL, "org/mycore/common/xsl/MCRTemplatesSource", "getSource", "()Ljavax/xml/transform/sax/SAXSource;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(162, l12);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "templates", "[Ljavax/xml/transform/Templates;");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "tFactory", "Ljavax/xml/transform/sax/SAXTransformerFactory;");
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "javax/xml/transform/sax/SAXTransformerFactory", "newTemplates", "(Ljavax/xml/transform/Source;)Ljavax/xml/transform/Templates;", false);
            mv.visitInsn(AASTORE);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(163, l13);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "templates", "[Ljavax/xml/transform/Templates;");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(AALOAD);
            Label l14 = new Label();
            mv.visitJumpInsn(IFNONNULL, l14);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(164, l15);
            mv.visitTypeInsn(NEW, "javax/xml/transform/TransformerConfigurationException");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitLdcInsn("XSLT Stylesheet could not be compiled: ");
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "(Ljava/lang/String;)V", false);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(165, l16);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "templateSources", "[Lorg/mycore/common/xsl/MCRTemplatesSource;");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKEVIRTUAL, "org/mycore/common/xsl/MCRTemplatesSource", "getURL", "()Ljava/net/URL;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(164, l17);
            mv.visitMethodInsn(INVOKESPECIAL, "javax/xml/transform/TransformerConfigurationException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l14);
            mv.visitLineNumber(167, l14);
            mv.visitFrame(F_APPEND,1, new Object[] {"javax/xml/transform/sax/SAXSource"}, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "modified", "[J");
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(LLOAD, 3);
            mv.visitInsn(LASTORE);
            mv.visitLabel(l11);
            mv.visitLineNumber(158, l11);
            mv.visitFrame(F_CHOP,2, null, 0, null);
            mv.visitIincInsn(2, 1);
            mv.visitLabel(l7);
            mv.visitFrame(F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "templateSources", "[Lorg/mycore/common/xsl/MCRTemplatesSource;");
            mv.visitInsn(ARRAYLENGTH);
            mv.visitJumpInsn(IF_ICMPLT, l8);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(170, l18);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);
            mv.visitFieldInsn(PUTFIELD, "org/mycore/common/content/transformer/MCRXSLTransformer", "modifiedChecked", "J");
            mv.visitLabel(l4);
            mv.visitLineNumber(172, l4);
            mv.visitFrame(F_CHOP,1, null, 0, null);
            mv.visitInsn(RETURN);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLocalVariable("this", "Lorg/mycore/common/content/transformer/MCRXSLTransformer;", null, l0, l19, 0);
            mv.visitLocalVariable("check", "Z", null, l3, l19, 1);
            mv.visitLocalVariable("i", "I", null, l6, l18, 2);
            mv.visitLocalVariable("lastModified", "J", null, l9, l11, 3);
            mv.visitLocalVariable("source", "Ljavax/xml/transform/sax/SAXSource;", null, l12, l11, 5);
            mv.visitMaxs(5, 6);
            mv.visitEnd();
            return null;//Do not visit the existing method. We override the existing method
        }
        return mv;
    }
}