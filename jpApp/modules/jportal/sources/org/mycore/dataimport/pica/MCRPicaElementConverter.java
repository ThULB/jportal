package org.mycore.dataimport.pica;


import java.util.ArrayList;
import java.util.List;

import org.jdom.Element;
import org.jdom.filter.ElementFilter;
import org.mycore.importer.MCRImportField;
import org.mycore.importer.MCRImportRecord;
import org.mycore.importer.MCRImportRecordConverter;

/**
 * <p>
 * This class converts incoming pica record elements to <code>MCRImportRecords</code>
 * and <code>MCRImportFields</code>. The id of an import field is generated by the
 * following syntax:<br/>
 * {datafieldtag}/{occurrence}_{additional}_{subfieldcode}
 * </p>
 * <p>
 * Here are some examples for field ids:
 * <ul>
 * <li>001A_0 -> a standard datafield tag "001A" and the subfield code "0"</li>
 * <li>001A/b_0 -> the same above with the occurrence "b"</li>
 * <li>001A/b_k_0 -> additional data "k" is added @see pica+ 028L</li>
 * </ul>
 * </p>
 *
 * @author Matthias Eichner
 */
public class MCRPicaElementConverter implements MCRImportRecordConverter<Element>{

    private String recordName;

    public MCRPicaElementConverter(String recordName) {
        this.recordName = recordName;
    }

    public void setRecordName(String recordName) {
        this.recordName = recordName;
    }
    public String getRecordName() {
        return recordName;
    }

    /**
     * This method converts a pica element to a <code>MCRImportRecord</code>.
     */
    @Override
    @SuppressWarnings("unchecked")
    public MCRImportRecord convert(Element toConvert) {
        MCRImportRecord record = new MCRImportRecord(recordName);
        List<Element> datafieldList = toConvert.getContent(new ElementFilter("datafield"));
        for (Element datafieldElement : datafieldList) {
            record.addFields(getFields(datafieldElement));
        }
        return record;
    }

    /**
     * Creates a list of <code>MCRImportFields</code>. For each subfield in
     * the datafield element a new <code>MCRImportField</code> is created.
     * How the id of each field is generated is described at the top of the
     * class.
     * 
     * @param datafieldElement the jdom datafield elemnt to parse
     * @return a list of <code>MCRImportFields</code>
     */
    @SuppressWarnings("unchecked")
    public ArrayList<MCRImportField> getFields(Element datafieldElement) {
        ArrayList<MCRImportField> fields = new ArrayList<MCRImportField>();
        String dataFieldTag = datafieldElement.getAttributeValue("tag");
        String occurrence = datafieldElement.getAttributeValue("occurrence");
        String additional = getAdditionalFields(datafieldElement);

        StringBuffer id = new StringBuffer(dataFieldTag);

        if (occurrence != null && !occurrence.equals(""))
            id.append("/").append(occurrence);
        if (additional != null && !additional.equals(""))
            id.append("_").append(additional);

        List<Element> subfieldList = datafieldElement.getContent(new ElementFilter("subfield"));
        for (Element subfieldElement : subfieldList) {
            String code = subfieldElement.getAttributeValue("code");
            String finalId = new StringBuffer(id).append("_").append(code).toString();
            String value = subfieldElement.getText();
            fields.add(new MCRImportField(finalId, value));
        }
        return fields;
    }

    /**
     * The pica xml structure contains some special cases which are important.
     * This method handle these special cases.
     * 
     * @param datafieldElement
     * @return
     */
    protected String getAdditionalFields(Element datafieldElement) {
        StringBuffer additionalTag = new StringBuffer();

        // specaial k subtag for persons
        if (datafieldElement.getAttributeValue("tag").equals("028L")) {
            String kAdditional = getKSubtag(datafieldElement);
            if (kAdditional != null)
                additionalTag.append(kAdditional);
        }
        return additionalTag.toString();
    }

    @SuppressWarnings("unchecked")
    protected String getKSubtag(Element datafieldElement) {
        List<Element> subfieldList = datafieldElement.getContent(new ElementFilter("subfield"));
        for (Element subfieldElement : subfieldList) {
            String code = subfieldElement.getAttributeValue("code");
            String text = subfieldElement.getText();
            if (code != null && text != null && code.equals("B") && (text.equals("k.") || text.equals("k"))) {
                return "k";
            }
        }
        return null;
    }

}