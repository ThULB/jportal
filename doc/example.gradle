// list content of folder and write a XML file
println "Generate template name XML...."
def tree = fileTree(dir: 'src/main/resources/META-INF/resources/templates')
tree.include 'template_*'
def templateNameXMl = new File(project.buildDir,"templateName.xml");
templateNameXMl.withPrintWriter { writer ->
    writer.println '<?xml version="1.0"?>'
    writer.println '<folderList>'
    tree.visit {file ->
    writer.println "<option value='$file.name'>"
    writer.println "<label xml:lang='de'>$file.name<label>"
    writer.println "</option>"
    }
    writer.println '</folderList>'
}
println "Successfully generate template name XML."

project(':jportal_jetty_tools'){
    configurations { solr }

    dependencies{
        compile 'org.hsqldb:hsqldb:2.3.2'
        compile 'javax.servlet:javax.servlet-api:3.0.1'
        compile 'log4j:log4j:1.2.17'
        solr "org.mycore:mycore-solr:$mcrVersion@jar"
    }
    
    def solrBuildDir = "$project.buildDir/solr"
    processResources.doFirst{
        def solrJar
        configurations.solr.each{ file ->
            solrJar = file.absolutePath
            println "Solr Jar $solrJar";
        }
        copy {
            // get files from jar file, just use files no folder
            // from zipTree(solrJar) also look at folders
            from zipTree(solrJar).files
            include 'classificationSchema.xml'
            into solrBuildDir
            includeEmptyDirs = false
        }
    }
    processResources {
        from("$solrBuildDir/classificationSchema.xml") { into 'config/jportal_jetty_tools/solr/solr-home/conf' }
    }
}