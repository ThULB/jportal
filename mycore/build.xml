<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- =================================================================== -->
<!-- MyCoRe build file for use with Apache Ant                           -->
<!-- $Revision: 1.144 $ $Date: 2007-12-20 10:58:54 $                      -->
<!-- =================================================================== -->

<project name="MyCoRe" default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Global properties you normally should not change                    -->
  <!-- =================================================================== -->

  <!-- Javac properties -->
  <property name="debug" value="on" />
  <property name="optimize" value="on" />
  <property name="deprecation" value="off" />
  <property name="javatarget" value="1.5" />
  <property name="sourcerelease" value="1.5" />
  <property name="sourceencoding" value="ISO-8859-15" />
  <property name="env.MYCORE_HOME" value="." />
  <!-- Junit properties -->
  <property name="junit.printsummary" value="on" />
  <property name="junit.showoutput" value="false" />
  <property name="junit.dir" value="${basedir}" />
  <property name="junit.formatter.type" value="brief" />
  <property name="junit.formatter.usefile" value="false" />
  <!-- System CLASSPATH is concatenated to any specified classpaths at the end! -->
  <property name="build.sysclasspath" value="last" />
  <!-- Path definitions -->
  <property name="target.dir" location="${basedir}/build" />
  <property name="target.sources" location="${target.dir}/sources" />
  <property name="target.classes" location="${target.dir}/classes" />
  <property name="target.appletbase" location="${target.dir}/upload-applet" />
  <property name="target.appletclasses" location="${target.appletbase}/classes" />
  <property name="target.config" location="${target.dir}/config" />
  <property name="target.javadocs" location="${target.dir}/javadocs" />
  <property name="target.libs" location="${target.dir}/lib" />
  <property name="target.jarbase" location="${target.dir}/jarbase" />
  <property name="components.dir" location="${basedir}/components" />
  <property name="target.version" value="2.0" />

  <condition property="ant1.7">
    <available classname="org.apache.tools.ant.taskdefs.condition.AntVersion" />
  </condition>
  <fail unless="ant1.7">
    Ant too old.
    Sorry your ant version is too old. You need at least "Ant 1.7.0".
    You have: ${ant.version}
  </fail>

  <!-- Read in all environment variables -->
  <property environment="env" />

  <path id="mycore.jars">
    <fileset dir="${basedir}/lib" includes="*.jar" />
    <fileset dir="${components.dir}" includes="*/lib/*.jar" />
  </path>
  <fileset id="components.resources" dir="${components.dir}">
    <include name="*/resources/**" />
  </fileset>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="mycore.jars" />
  <!-- for task is not included in antcontrib.properties by default -->
  <taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="mycore.jars" />
  <!-- Read in properties from config/build.properties -->
  <if>
    <not>
      <available file="${basedir}/config/build.properties" />
    </not>
    <then>
      <echo level="warning">Cannot find ${basedir}/config/build.properties using template</echo>
      <copy tofile="${basedir}/config/build.properties" file="${basedir}/config/build.properties.template" />
    </then>
  </if>
  <property file="${basedir}/config/build.properties" />

  <!-- Path where PDF doclet is installed -->
  <property name="doclets" value="/svn/doclets" />

  <if>
    <isset property="MCR.System.SharedJarsDir" />
    <then>
      <path id="share.classpath">
        <fileset dir="${MCR.System.SharedJarsDir}" includes="_dummy_ ${MCR.System.Jars}" id="shared.jars" />
      </path>
    </then>
    <else>
      <path id="share.classpath" />
      <fileset id="shared.jars" dir="${basedir}" excludes="**" />
    </else>
  </if>
  <path id="mycore.classpath">
    <pathelement location="${target.classes}" />
    <path refid="mycore.jars" />
    <fileset dir="${ant.library.dir}" includes="ant.jar" />
    <path refid="share.classpath" />
    <pathelement location="${basedir}/resources" />
    <dirset dir="${components.dir}" includes="*/resources" />
  </path>

  <macrodef name="modulePreHook">
    <attribute name="target" />
    <sequential>
      <for list="${MCR.Modules.MyCoRe}" param="module" parallel="false">
        <sequential>
          <if>
            <resourcecount when="greater" count="0">
              <fileset dir="." includes="components/@module/build.xml">
                <containsregexp expression="\u003ctarget.*name=\u0022pre.@{target}\u0022" />
              </fileset>
            </resourcecount>
            <then>
              <subant target="pre.@{target}" inheritall="true" inheritrefs="true">
                <fileset dir="." includes="components/@module/build.xml">
                  <containsregexp expression="\u003ctarget.*name=\u0022pre.@{target}\u0022" />
                </fileset>
              </subant>
            </then>
            <else>
              <echo level="debug">No target pre.@{target} found in module @{module}.</echo>
            </else>
          </if>
        </sequential>
      </for>
    </sequential>
  </macrodef>
  <macrodef name="moduleHook">
    <attribute name="target" />
    <sequential>
      <for list="${MCR.Modules.MyCoRe}" param="module" parallel="false">
        <sequential>
          <if>
            <resourcecount when="greater" count="0">
              <fileset dir="." includes="components/@{module}/build.xml">
                <containsregexp expression="\u003ctarget.*name=\u0022@{target}\u0022" />
              </fileset>
            </resourcecount>
            <then>
              <subant target="@{target}" inheritall="true" inheritrefs="true">
                <fileset dir="." includes="components/@{module}/build.xml">
                  <containsregexp expression="\u003ctarget.*name=\u0022@{target}\u0022" />
                </fileset>
              </subant>
            </then>
            <else>
              <echo level="debug">No target @{target} found in module @{module}.</echo>
            </else>
          </if>
        </sequential>
      </for>
    </sequential>
  </macrodef>

  <!-- =================================================================== -->
  <!-- Some help on using ant with this build file                         -->
  <!-- =================================================================== -->

  <target name="usage" description="Display main targets by running 'ant -projecthelp'">
    <java classname="org.apache.tools.ant.Main" fork="false">
      <arg value="-projecthelp" />
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Output environment variables, software and operating system version -->
  <!-- =================================================================== -->

  <target name="info" depends="init" description="display software and os versions">
    <modulePreHook target="info" />
    <property name="output.classpath" refid="mycore.classpath" />

    <echo level="info">Base directory   : ${basedir}</echo>
    <echo level="info">Operating system : ${os.name} Version ${os.version} on ${os.arch} </echo>
    <echo level="info">Java version     : JDK ${ant.java.version} Version ${java.version} from ${java.vendor}</echo>
    <echo level="info">Java home        : ${java.home}</echo>
    <echo level="info">Ant build file   : $Revision: 1.144 $ $Date: 2007-12-20 10:58:54 $</echo>
    <echo level="info">Ant version      : ${ant.version}</echo>
    <echo level="info">Ant home         : ${ant.home}</echo>
    <echo level="info">Ant libdir       : ${ant.library.dir}</echo>
    <echo level="info">System CLASSPATH : ${build.sysclasspath}</echo>
    <echo level="info">Active CLASSPATH : ${output.classpath}</echo>
    <moduleHook target="info" />
  </target>

  <!-- =================================================================== -->
  <!-- Initialize directories and build CLASSPATH for compiling sources    -->
  <!-- =================================================================== -->

  <target name="init">
    <!-- find out revision number of HEAD -->
  	<if>
  		<not>
  			<isset property="revision.number" />
  		</not>
  		<then>
  			<condition property="svn.entries.present">
  				<available file="${basedir}/.svn/entries"/>
  			</condition>
  			<fail unless="svn.entries.present">
  				SVN REVISION ERROR
  				Cannot determine Subversion revision number of MyCoRe.
  				Please run ant with
  				ant -Drevision.number=&lt;svn revision&gt; &lt;ant target&gt;
  			</fail>
	  	    <loadfile srcfile="${basedir}/.svn/entries" property="svn.rev.line">
	  	        <filterchain>
	  	            <headfilter lines="1" skip="3"/>
	  	        </filterchain>
	  	    </loadfile>
	  	    <propertyregex property="revision.number" input="${svn.rev.line}" select="\1">
				<regexp pattern="([0-9]*)" />
	  	    </propertyregex>
  		</then>
  	</if>
    <echo level="info">MyCoRe Revision found: ${revision.number}</echo>
    <property name="mycore.version" value="${target.version} r${revision.number}" />
    <!-- include imaging component only if JAI is available -->
    <condition property="jai.available">
      <available classname="javax.media.jai.JAI" classpathref="mycore.classpath" />
    </condition>

    <path id="sources.path">
      <dirset dir="${basedir}" includes="sources" />
      <dirset dir="${basedir}" includes="build/sources" />
      <dirset dir="${components.dir}" includes="*/sources">
        <exclude name="imaging/sources" unless="jai.available" />
        <exclude name="iview/sources" unless="jai.available" />
      </dirset>
    </path>
  </target>
  
  <!-- =================================================================== -->
  <!-- Runs CruiseControl build                                            -->
  <!-- =================================================================== -->

  <target name="cc.build">
    <exec executable="svn">
      <arg line="update" />
    </exec>
    <ant target="clean" />
    <ant target="jar">
      <property name="deprecation" value="on" />
    </ant>
    <mkdir dir="${target.dir}/tests" />
    <ant target="test">
      <property name="junit.printsummary" value="off" />
      <property name="junit.formatter.type" value="xml" />
      <property name="junit.formatter.usefile" value="true" />
      <property name="junit.dir" value="${target.dir}/tests" />
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Runs JUnit test cases                                               -->
  <!-- =================================================================== -->

  <target name="test" depends="init,compile_testcases">
    <junit printsummary="${junit.printsummary}" fork="true" showoutput="${junit.showoutput}">
      <classpath>
        <path refid="mycore.classpath" />
        <pathelement location="${basedir}/tests" />
      </classpath>
      <formatter type="${junit.formatter.type}" usefile="${junit.formatter.usefile}" unless="junit.formatter.classname" />
      <formatter classname="${junit.formatter.classname}" extension="${junit.formatter.extension}" usefile="${junit.formatter.usefile}" if="junit.formatter.classname" />
      <batchtest todir="${junit.dir}">
        <fileset dir="${target.classes}">
          <include name="**/*Test*.class" />
          <exclude name="**/FulltextTester.class" />
          <exclude name="**/MCRTestCase.class" />
          <exclude name="**/MCRHibTestCase.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  <target name="compile_testcases">
    <echo level="info">Compiling JUnit test cases...</echo>
    <antcall target="javac">
      <param name="altdir" value="${basedir}/tests" />
      <param name="packages" value="**/*Test*" />
    </antcall>
  </target>

  <!-- =================================================================== -->
  <!-- Creates a mycore-for-*.jar file containing all compiled MyCoRe classes  -->
  <!-- =================================================================== -->

  <target name="jar" depends="compile" description="creates lib/mycore.jar">
    <modulePreHook target="jar" />
    <property name="jarfile" value="mycore.jar" />
    <echo level="info">Creating ${jarfile} containing all compiled classes...</echo>
    <mkdir dir="${target.libs}" />
    <antcall target="jar.copy-web" />
    <antcall target="jar.copy-xsl" />
    <antcall target="jar.copy-config" />
    <antcall target="jar.copy-schema" />
    <antcall target="jar.copy-resources" />
    <antcall target="jar.copy-components" />
    <antcall target="jar.upload-applet" />
    <jar destfile="${target.libs}/${jarfile}">
      <fileset dir="${target.classes}" includes="**/*.class" />
      <fileset dir="${target.classes}" includes="META-INF/services/*" />
      <fileset dir="${target.jarbase}" />
      <fileset dir="${basedir}" includes="integrate.xml" />
      <manifest>
        <attribute name="Main-Class" value="org.mycore.MCRCoreVersion" />
        <attribute name="MCR-Version" value="${target.version} r${revision.number}" />
      </manifest>
    </jar>
    <copy todir="${target.libs}">
      <mapper type="flatten" />
      <fileset dir="${basedir}/lib" includes="*.jar" />
      <fileset dir="${components.dir}" includes="*/lib/*.jar" />
      <fileset refid="shared.jars" />
    </copy>
    <moduleHook target="jar" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: jar.copy-xsl                      
         - - - - - - - - - - - - - - - - - -->
  <target name="jar.copy-web">
    <mkdir dir="${target.jarbase}/web" />
  	<copy todir="${target.jarbase}/web" file="${basedir}/lib/fckEditor.zip"/>
    <mkdir dir="${target.jarbase}/web/fck" />
  	<copy todir="${target.jarbase}/web/fck" file="${basedir}/config/fckconfig.js"/>
    <mkdir dir="${target.jarbase}/web/oai" />
  	<copy todir="${target.jarbase}/web/oai" file="${basedir}/xsl/oai2.xsl"/>
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: jar.copy-xsl                      
         - - - - - - - - - - - - - - - - - -->
  <target name="jar.copy-xsl">
    <mkdir dir="${target.jarbase}/xsl" />
    <copy todir="${target.jarbase}/xsl" flatten="true">
      <fileset dir="${basedir}/xsl" includes="**/*.xsl" />
      <fileset dir="${components.dir}">
        <include name="*/xsl/*.xsl" />
      </fileset>
    </copy>
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: jar.copy-config                      
         - - - - - - - - - - - - - - - - - -->
  <target name="jar.copy-config">
    <mkdir dir="${target.jarbase}/config" />
    <copy todir="${target.jarbase}/config">
      <fileset dir="${basedir}/config">
        <exclude name="*.template" />
        <exclude name="deprecated*" />
      </fileset>
    </copy>
    <copy todir="${target.jarbase}">
      <fileset dir="${basedir}/config" includes="deprecated*" />
    </copy>
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: jar.copy-schema                      
         - - - - - - - - - - - - - - - - - -->
  <target name="jar.copy-schema">
    <copy todir="${target.jarbase}" flatten="true">
      <fileset dir="${basedir}/schema" includes="*.dtd *.xsd" />
      <fileset dir="${components.dir}">
        <include name="*/schema/*.dtd" />
        <include name="*/schema/*.xsd" />
      </fileset>
    </copy>
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: jar.copy-resources                      
         - - - - - - - - - - - - - - - - - -->
  <target name="jar.copy-resources">
    <copy todir="${target.jarbase}" failonerror="false">
      <fileset dir="${basedir}/resources" />
    </copy>
    <copy todir="${target.jarbase}">
      <!-- removes <modulename>/resources from filename -->
      <mapper type="regexp" from="^[^/\\]+[/\\]resources[/\\](.*)$$" to="\1" />
      <fileset refid="components.resources" />
    </copy>
    <if>
      <not>
        <available file="${target.jarbase}/mycoreobject.dtd" />
      </not>
      <then>
        <echo file="${target.jarbase}/mycoreobject.dtd">
          <![CDATA[<!ELEMENT mycoreobject ANY>
    ]]></echo>
      </then>
    </if>
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: jar.copy-components                   
         - - - - - - - - - - - - - - - - - -->
  <target name="jar.copy-components">
    <mkdir dir="${target.jarbase}/components" />
    <for param="component">
      <dirset dir="${components.dir}">
        <include name="*" />
      </dirset>
      <sequential>
        <basename file="@{component}" property="component.name.@{component}" />
        <echo level="debug">Copying files of component ${component.name.@{component}}</echo>
        <mkdir dir="${target.jarbase}/components/${component.name.@{component}}" />
        <copy todir="${target.jarbase}/components/${component.name.@{component}}">
          <fileset dir="${components.dir}/${component.name.@{component}}">
            <include name="config/**" />
            <include name="web/**" />
            <include name="integrate.xml" />
          </fileset>
        </copy>
      </sequential>
    </for>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the sources from directory sources to directory classes    -->
  <!-- =================================================================== -->

  <target name="javac" depends="init">
    <echo level="info">Compiling ${packages}</echo>
    <condition property="altdir" value="">
      <not>
        <isset property="altdir" />
      </not>
    </condition>
    <mkdir dir="${target.classes}" />
    <javac destdir="${target.classes}"
           includes="${packages}"
           excludes="${excludes}"
           classpathref="mycore.classpath"
           debug="${debug}"
           optimize="${optimize}"
           target="${javatarget}"
           source="${sourcerelease}"
           encoding="${sourceencoding}"
           fork="yes"
           deprecation="${deprecation}">
      <src>
        <path>
          <path refid="sources.path" />
          <path path="${altdir}" />
        </path>
      </src>
    </javac>
  </target>

  <target name="compile" depends="init" description="compiles all sources to classes directory">
    <modulePreHook target="compile" />
    <echo level="info">Compiling MyCoRe classes...</echo>
    <mkdir dir="${target.sources}/org/mycore" />
    <echo file="${target.sources}/org/mycore/MCRCoreVersion.java">
      <![CDATA[
package org.mycore;
/** Generated in ANT */
public class MCRCoreVersion{
  public static final String VERSION  = "${target.version}";
  public static final int    REVISION = ${revision.number};
  public static final String COMPLETE = "${target.version} r${revision.number}";
  public static String getVersion(){return VERSION;}
  public static int getRevision(){return REVISION;}
  public static String getCompleteVersion(){return COMPLETE;}
  public static void main(String arg[]){
    	System.out.printf("MyCoRe\tver: %s\trev: %d\n",VERSION,REVISION);
  }
}
]]>
    </echo>
    <antcall target="javac">
      <param name="packages" value="**" />
      <param name="excludes" value="${mcr.exclude}" />
    </antcall>
    <moduleHook target="compile" />
  </target>
  
  <target name="compile.upload-applet" depends="init">
    <mkdir dir="${target.appletclasses}"/>
    <javac destdir="${target.appletclasses}"
           includes="org/mycore/frontend/fileupload/**"
      	   excludes="org/mycore/frontend/fileupload/*Handler* org/mycore/frontend/fileupload/*Servlet*"
           classpathref="mycore.classpath"
           debug="${debug}"
           optimize="${optimize}"
           target="1.4"
           source="1.4"
           encoding="${sourceencoding}"
      	   fork="yes"
           deprecation="${deprecation}">
      <src>
        <path refid="sources.path" />
      </src>
    </javac>
  </target>
  
  <target name="jar.upload-applet" depends="compile.upload-applet">
    <copy file="${basedir}/config/messages_de.MCRUploadApplet"
          tofile="${target.appletclasses}/messages_de.properties"
          preservelastmodified="true" />
    <copy file="${basedir}/config/messages_en.MCRUploadApplet"
          tofile="${target.appletclasses}/messages_en.properties"
          preservelastmodified="true" />
    <jar jarfile="${target.jarbase}/uploadApplet-unsigned.jar">
      <fileset dir="${target.appletclasses}" />
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Check if javadocs and pdf are up to date or outdated                -->
  <!-- =================================================================== -->

  <target name="up2date">

    <path id="javadocs.classpath" refid="mycore.classpath" />

    <path id="sourcepath">
      <dirset dir="${basedir}" includes="sources" />
      <dirset dir="${basedir}" includes="components/*/**/src" />
      <dirset dir="${basedir}" includes="components/*/sources" />
    </path>

    <condition property="javadocs.outdated">
      <not>
        <uptodate>
          <srcfiles dir="${basedir}" includes="**/*.java" />
          <srcfiles dir="${basedir}" includes="**/*.html" />
          <mapper type="merge" to="${target.javadocs}/overview-tree.html" />
        </uptodate>
      </not>
    </condition>

    <condition property="pdf.outdated">
      <not>
        <uptodate>
          <srcfiles dir="${basedir}" includes="**/*.java" />
          <srcfiles dir="${doclets}" includes="pdfdoclet-mycore.properties" />
          <mapper type="merge" to="${target.javadocs}/javadocs.pdf" />
        </uptodate>
      </not>
    </condition>

  </target>

  <!-- =================================================================== -->
  <!-- Create the HTML JavaDocs from sources                               -->
  <!-- =================================================================== -->

  <target name="javadocs"
          depends="init,up2date"
          if="javadocs.outdated"
          description="creates JavaDoc API documentation in HTML format">
    <modulePreHook target="javadocs" />
    <echo level="info">Building the MyCoRe JavaDoc API documentation...</echo>

    <mkdir dir="${target.javadocs}" />
    <javadoc packagenames="*"
             encoding="${sourceencoding}"
             sourcepathref="sourcepath"
             destdir="${target.javadocs}"
             classpathref="javadocs.classpath"
             author="true"
             version="true"
             use="true"
             access="package"
             splitindex="true"
             linksource="true"
             windowtitle="MyCoRe JavaDoc Documentation"
             doctitle="MyCoRe Source Code JavaDoc Documentation">
      <group title="MyCoRe Datamodel" packages="org.mycore.datamodel*" />
      <group title="MyCoRe Persistence Backend Implementations" packages="org.mycore.backend*" />
      <group title="MyCoRe User Interface Frontend" packages="org.mycore.frontend*" />
      <group title="MyCoRe Common Functionality" packages="org.mycore.common*" />
      <group title="MyCoRe Services" packages="org.mycore.services*" />
      <group title="MyCoRe User and Group Management" packages="org.mycore.user*" />

      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <link href="http://tomcat.apache.org/tomcat-5.5-doc/servletapi/" />
      <link href="http://java.sun.com/xml/jaxp/dist/1.1/docs/api/" />
      <link href="http://www.jdom.org/docs/apidocs" />
      <link href="http://logging.apache.org/log4j/docs/api/" />
      <link href="http://jakarta.apache.org/lucene/docs/api/" />
      <link href="http://www.hibernate.org/hib_docs/v3/api/" />
    </javadoc>
    <moduleHook target="javadocs" />
  </target>

  <!-- =================================================================== -->
  <!-- Create the PDF JavaDocs from sources                                -->
  <!-- =================================================================== -->

  <target name="java2pdf" depends="init,up2date" if="pdf.outdated">
    <echo level="info"> Building the MyCoRe JavaDoc API documentation as PDF...</echo>

    <mkdir dir="${target.javadocs}" />
    <javadoc packagenames="*"
             sourcepathref="sourcepath"
             classpathref="javadocs.classpath"
             author="true"
             version="true"
             access="package">
      <doclet name="com.tarsec.javadoc.pdfdoclet.PDFDoclet" path="${doclets}/itext-0.92.jar:${doclets}/pdfdoclet.jar">
        <param name="-pdf" value="${target.javadocs}/javadocs.pdf" />
        <param name="-config" value="${doclets}/pdfdoclet-mycore.properties" />
      </doclet>

    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Remove the user created directories and files                       -->
  <!-- =================================================================== -->

  <target name="clean" description="Removes all files generated by this build file">
    <modulePreHook target="clean" />
    <echo level="info">Cleaning up...</echo>
    <delete dir="${target.dir}" />
    <moduleHook target="clean" />
  </target>

  <!-- =================================================================== -->
  <!-- Build SVN ChangeLog                                                 -->
  <!-- =================================================================== -->

  <target name="changelog">
    <echo level="info">

      Building SVN ChangeLog, please be patient...
    </echo>

    <mkdir dir="${basedir}/changelogs" />
    <mkdir dir="${basedir}/changelogs/statsvn" />
    <exec executable="svn" output="${basedir}/changelogs/statsvn/svnlog.xml">
      <arg line="log -v --xml" />
    </exec>
    <java jar="../../doclets/statsvn.jar" fork="true">
      <arg value="${basedir}/changelogs/statsvn/svnlog.xml" />
      <arg value="." />
      <arg value="-title" />
      <arg value="MyCoRe" />
      <arg value="-output-dir" />
      <arg value="${basedir}/changelogs/statsvn" />
      <arg value="-viewvc" />
      <arg value="http://www.mycore.de/viewvc/viewvc.cgi/mycore/trunk" />
      <arg value="-bugzilla" />
      <arg value="https://sourceforge.net/tracker/index.php?func=detail&amp;aid=%s&amp;group_id=92005&amp;atid=599192" />
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Do work after a SVN commit...                                       -->
  <!-- =================================================================== -->

  <target name="postcommit">
    <antcall target="jar" />
    <antcall target="changelog" />
    <antcall target="javadocs" />
    <antcall target="java2pdf" />
  </target>

  <!-- =================================================================== -->
  <!-- Build downloadable distribution from SVN                            -->
  <!-- =================================================================== -->

  <target name="distribution">
    <antcall target="distribution.module">
      <param name="Distrib.Module" value="mycore" />
      <param name="Distrib.SubDir" value="" />
      <param name="Distrib.ZipFile" value="mycore" />
    </antcall>
    <antcall target="distribution.module">
      <param name="Distrib.Module" value="docportal" />
      <param name="Distrib.SubDir" value="" />
      <param name="Distrib.ZipFile" value="docportal" />
    </antcall>
    <antcall target="distribution.module">
      <param name="Distrib.Module" value="content" />
      <param name="Distrib.SubDir" value="defaultsample" />
      <param name="Distrib.ZipFile" value="defaultsample" />
    </antcall>
  </target>

  <target name="distribution.module">
    <property name="Distrib.TmpDir" value="tmp" />
    <property name="Distrib.TargetDir" value="/mcr/www/download" />
    <property name="Distrib.Tag" value="release_1_3_beta" />
    <property name="Distrib.ReleaseNr" value="1.3.beta" />

    <delete dir="${Distrib.TmpDir}" />

    <mkdir dir="${Distrib.TmpDir}" />
    <mkdir dir="${Distrib.TargetDir}" />

    <exec executable="svn" spawn="true">
      <arg value="export" />
      <arg value="file:///svn/${Distrib.Module}/tags/${Distrib.ReleaseTag}/${Distrib.SubDir}" />
      <arg value="${Distrib.TmpDir}/${Distrib.Module}" />
    </exec>

    <zip destfile="${Distrib.TargetDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.zip"
         basedir="${Distrib.TmpDir}"
         includes="${Distrib.Module}/**"
         encoding="ISO_8859_1" />

    <tar tarfile="${Distrib.TmpDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.tar"
         basedir="${Distrib.TmpDir}"
         includes="${Distrib.Module}/**"
         longfile="gnu" />

    <gzip src="${Distrib.TmpDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.tar"
          zipfile="${Distrib.TargetDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.tar.gz" />

    <delete dir="${Distrib.TmpDir}" />

    <chmod dir="${Distrib.TargetDir}" includes="${Distrib.ZipFile}-${Distrib.ReleaseNr}.*" perm="a+r" />

  </target>

</project>
