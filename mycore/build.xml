<?xml version="1.0" encoding="ISO-8859-1"?>

  <!-- =================================================================== -->
  <!-- MyCoRe build file for use with Apache Ant                           -->
  <!-- $Revision: 1.122 $ $Date: 2006/09/08 10:21:02 $                      -->
  <!-- =================================================================== -->

<project name="MyCoRe" default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Global properties you normally should not change                    -->
  <!-- =================================================================== -->

  <!-- Javac properties -->
  <property name="debug"          value="on" />
  <property name="optimize"       value="on" />
  <property name="deprecation"    value="off" />
  <property name="javatarget"     value="1.4" />
  <property name="sourcerelease"  value="1.4" />
  <!--property name="build.compiler"     value="jikes"/-->
  <property name="sourceencoding" value="ISO-8859-15" />
  <property name="env.MYCORE_HOME" value="." />
	
  <!-- Read in all environment variables -->
  <property environment="env" />

  <!-- Read in properties from config/build.properties -->
  <property file="${basedir}/config/build.properties" />
  <condition property="MCR.XMLStore.Type" value="OpenSource">
    <not><isset property="MCR.XMLStore.Type"/></not>
  </condition>

  <!-- MyCoRe CVS repository root -->
  <property name="CVSRoot" value="/cvs" />

  <!-- Path where PDF doclet is installed -->
  <property name="doclets" value="/mcr/cvs/doclets" />

  <!-- =================================================================== -->
  <!-- Some help on using ant with this build file                         -->
  <!-- =================================================================== -->

  <target name="usage">
    <echo>
      Usage:
        build.sh [target]          or
        build.cmd [target]         or
        ant [target]

      Available targets are:
        info          --> Shows Java/Ant/Operating System version, CLASSPATH etc.
        jar           --> Creates file lib/mycore-for-*.jar containing all compiled classes
        compile       --> Compiles all source code to directory classes
        compile_[pkg] --> Compiles only a certain package (see build.xml for details)
        javadocs      --> Generates JavaDoc API documentation as HTML in directory documentation/html
        clean         --> Removes all compiled classes and javadocs, cleaning up

      Please do not use any of the other targets, they are internal.
    </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Output environment variables, software and operating system version -->
  <!-- =================================================================== -->

  <target name="info" depends="init" description="display software and os versions">
    <property name="output.classpath" refid="mycore.classpath" />

    <echo>Base directory   : ${basedir}</echo>
    <echo>Operating system : ${os.name} Version ${os.version} on ${os.arch} </echo>
    <echo>Java version     : JDK ${ant.java.version} Version ${java.version} from ${java.vendor}</echo>
    <echo>Java home        : ${env.JAVA_HOME}</echo>
    <echo>Ant build file   : $Revision: 1.122 $ $Date: 2006/09/08 10:21:02 $</echo>
    <echo>Ant version      : ${ant.version}</echo>
    <echo>Ant home         : ${ant.home}</echo>
    <echo>Ant libdir       : ${ant.library.dir}</echo>
    <echo>XML Store type   : ${MCR.XMLStore.Type}</echo>
    <echo>JDBC Store type  : ${MCR.JDBCStore.Type}</echo>
    <echo>System CLASSPATH : ${build.sysclasspath}</echo>
    <echo>Active CLASSPATH : ${output.classpath}</echo>
  </target>

  <!-- =================================================================== -->
  <!-- Initialize directories and build CLASSPATH for compiling sources    -->
  <!-- =================================================================== -->

  <target name="init" depends="jdbcstore.path.1, jdbcstore.path.2, xmlstore.path.1, xmlstore.path.2, system.path.1, system.path.2" >
    <echo>Initializing directories and classpath...</echo>

    <mkdir dir="${basedir}/classes" />
    <mkdir dir="${basedir}/documentation/html" />
    <mkdir dir="${basedir}/documentation/pdf"  /> 

    <!-- Fail if environment variables are not set -->
    <fail message="Environment variable JAVA_HOME is not set!" unless="env.JAVA_HOME" />

    <path id="mycore.classpath">
      <pathelement location="${basedir}/classes" />
      <fileset dir="${basedir}/lib" includes="*.jar"/>
		<!--
      <fileset dir="${ant.library.dir}" includes="*junit*.jar"/>
			-->
      <fileset dir="${ant.library.dir}" includes="ant.jar"/>
      <path refid="jdbc.classpath" />
      <path refid="xml.classpath"  />
      <path refid="system.classpath"  />
    </path>
  </target>

  <target name="jdbcstore.path.1" if="MCR.JDBCStore.BaseDir">
    <path id="jdbc.classpath">
      <fileset dir="${MCR.JDBCStore.BaseDir}" includes="_dummy_ ${MCR.JDBCStore.Jars}"        />
      <dirset  dir="${MCR.JDBCStore.BaseDir}" includes="_dummy_ ${MCR.JDBCStore.ClassesDirs}" />
    </path>
  </target>

  <target name="jdbcstore.path.2" unless="MCR.JDBCStore.BaseDir">
    <path id="jdbc.classpath" />
  </target>

  <target name="xmlstore.path.1" if="MCR.XMLStore.BaseDir">
    <path id="xml.classpath">
      <fileset dir="${MCR.XMLStore.BaseDir}" includes="_dummy_ ${MCR.XMLStore.Jars}"        />
      <dirset  dir="${MCR.XMLStore.BaseDir}" includes="_dummy_ ${MCR.XMLStore.ClassesDirs}" /> 
    </path>
  </target>

  <target name="xmlstore.path.2" unless="MCR.XMLStore.BaseDir">
    <path id="xml.classpath" />
  </target>

  <target name="system.path.1" if="MCR.System.SharedJarsDir">
    <path id="system.classpath">
      <fileset dir="${MCR.System.SharedJarsDir}" includes="_dummy_ ${MCR.System.Jars}"        />
    </path>
  </target>

  <target name="system.path.2" unless="MCR.System.SharedJarsDir">
    <path id="system.classpath" />
  </target>

  <!-- System CLASSPATH is completely ignored! -->
  <property name="build.sysclasspath" value="ignore"/>

  <!-- =================================================================== -->
  <!-- Runs JUnit test cases                                               -->
  <!-- =================================================================== -->

	<target name="test" depends="compile_testcases">
	    <junit>
	    	<classpath refid="mycore.classpath"/>
	    	<formatter type="brief" usefile="false"/>
	    	<batchtest>
	    		<fileset dir="${basedir}/classes/">
	    			<include name="**/*Test*.class"/>
	    			<exclude name="**/FulltextTester.class"/>
	    			<exclude name="**/MCRTestCase.class"/>
	    	    </fileset>
	    	</batchtest>
		</junit>    
	</target>
	<target name="compile_testcases">
		<echo>Compiling JUnit test cases...</echo>
	    <antcall target="javac">
	      <param name="altdir" value="${basedir}/tests"/>
	      <param name="packages" value="**/*Test*"/>
	    </antcall>
	</target>

  <!-- =================================================================== -->
  <!-- Creates a mycore-for-*.jar file containing all compiled MyCoRe classes  -->
  <!-- =================================================================== -->

  <target name="jar" depends="compile" description="creates lib/mycore*.jar">
    <condition property="jarfile" value="mycore.jar">
      <not><equals arg1="${MCR.XMLStore.Type}" arg2="cm8" /></not>
    </condition>
    <condition property="jarfile" value="mycore-with-cm8.jar">
      <equals arg1="${MCR.XMLStore.Type}" arg2="cm8" />
    </condition>

    <echo>Creating ${jarfile} containing all compiled classes...</echo>
    <jar 
      destfile="${basedir}/lib/${jarfile}"
    >
      <fileset dir="${basedir}/classes" includes="**/*.class"          />
      <fileset dir="${basedir}/classes" includes="META-INF/services/*" />
      <fileset dir="${basedir}/schema"  includes="*.xsd *.dtd"         />
      <fileset dir="${basedir}/config"  includes="build.properties"    />
    </jar>
    <echo>---------------------------------------------------------</echo>
  </target>
  
  <!-- =================================================================== -->
  <!-- Compiles the sources from directory sources to directory classes    -->
  <!-- =================================================================== -->

  <target name="javac" depends="init">
    <echo>Compiling ${packages}</echo>
  	<condition property="altdir" value="">
  		<not><isset property="altdir"/></not>
  	</condition>
    <javac srcdir="${basedir}/sources:${altdir}"
           destdir="${basedir}/classes"
           includes="${packages}"
    	   excludes="${excludes}"
           classpathref="mycore.classpath"
           debug="${debug}"
           optimize="${optimize}"
	       target="${javatarget}"
	       source="${sourcerelease}"
	       encoding="${sourceencoding}"
    	   fork="yes"
           deprecation="${deprecation}">
    </javac>
    <echo>---------------------------------------------------------</echo>
  </target>

  <target name="compile" description="compiles all sources to classes directory"
	  depends="compile_base, compile_backends, compile_modules">
  </target>

  <target name="compile_base">
     <echo>Compiling MyCoRe base classes...</echo>
     <antcall target="javac">
        <param name="packages" value="org/mycore/**"/>
        <param name="excludes" value="org/mycore/backend/**"/>
     </antcall>
  </target>	

  <target name="compile_backends">
    <echo>Compiling MyCoRe backend classes...</echo>

    <!-- For internal use: setting MCR.XMLStore.Type=all will compile cm7 and cm8 and xmldb -->
    <condition property="mcr.exclude" value="org/mycore/backend/cm8/**">
        <not><equals arg1="${MCR.XMLStore.Type}" arg2="cm8" /></not>
    </condition>
    <condition property="mcr.exclude" value="">
      <equals arg1="${MCR.XMLStore.Type}" arg2="cm8" />
    </condition>
    <antcall target="javac">
        <param name="packages" value="org/mycore/backend/**"/>
        <param name="excludes" value="${mcr.exclude}"/>
    </antcall>
  </target>
	  <target name="compile_modules">
	     <echo>Compiling MyCoRe modules...</echo>
	    <subant target="compile" inheritall="true" inheritrefs="true">
	      <fileset dir="." includes="modules/module-*/build.xml" />
	    </subant>
	  </target>	


  <!-- =================================================================== -->
  <!-- Check if javadocs and pdf are up to date or outdated                -->
  <!-- =================================================================== -->

  <target name="up2date">

    <path id="javadocs.classpath">
      <fileset dir="${basedir}/lib" includes="*.jar"/>
    </path>

    <path id="sourcepath">
      <dirset dir="${basedir}" includes="sources" />
      <dirset dir="${basedir}" includes="modules/module-*/**/src" />
      <dirset dir="${basedir}" includes="modules/module-*/sources" />
    </path>

    <condition property="javadocs.outdated">
      <not>
        <uptodate>
          <srcfiles dir="${basedir}" includes="**/*.java" />
          <srcfiles dir="${basedir}" includes="**/*.html" />
          <mapper type="merge" to="${basedir}/documentation/html/overview-tree.html"/>
        </uptodate>
      </not>
    </condition>

    <condition property="pdf.outdated">
      <not>
        <uptodate>
          <srcfiles dir="${basedir}" includes="**/*.java" />
          <srcfiles dir="${doclets}" includes="pdfdoclet-mycore.properties" />
          <mapper type="merge" to="${basedir}/documentation/pdf/javadocs.pdf"/>
        </uptodate>
      </not>
    </condition>

  </target>

  <!-- =================================================================== -->
  <!-- Create the HTML JavaDocs from sources                               -->
  <!-- =================================================================== -->

  <target name="javadocs" depends="init,up2date" if="javadocs.outdated" description="creates JavaDoc API documentation in HTML format">
    <echo>Building the MyCoRe JavaDoc API documentation...</echo>

    <javadoc
      packagenames        = "*"
      sourcepathref       = "sourcepath"
      destdir             = "${basedir}/documentation/html"
      classpathref        = "javadocs.classpath"
      author              = "true"
      version             = "true"
      use                 = "true"
      access              = "package"
      splitindex          = "true"
      linksource          = "true"
      windowtitle         = "MyCoRe JavaDoc Documentation"
      doctitle            = "MyCoRe Source Code JavaDoc Documentation"
    >
      <group title="MyCoRe Datamodel"                           packages="org.mycore.datamodel*" />
      <group title="MyCoRe Persistence Backend Implementations" packages="org.mycore.backend*"   />
      <group title="MyCoRe User Interface Frontend"             packages="org.mycore.frontend*"  />
      <group title="MyCoRe Common Functionality"                packages="org.mycore.common*"    />
      <group title="MyCoRe Services"                            packages="org.mycore.services*"  />
      <group title="MyCoRe User and Group Management"           packages="org.mycore.user*"      />

      <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
      <link href="http://www.mycore.de/library/cm-eip/eip-8.2-javadocs/" />
      <link href="http://jakarta.apache.org/tomcat/tomcat-5.0-doc/servletapi"/>
      <link href="http://java.sun.com/xml/jaxp/dist/1.1/docs/api/"/>
      <link href="http://www.jdom.org/docs/apidocs"/>
      <link href="http://xmldb-org.sourceforge.net/xapi/api/"/>
      <link href="http://logging.apache.org/log4j/docs/api/"/>
      <link href="http://jakarta.apache.org/lucene/docs/api/" />
      <link href="http://www.mycore.de/library/cm-eip/eip-8.2-javadocs/" />
    </javadoc>
    <echo>---------------------------------------------------------</echo>
  </target>

  <!-- =================================================================== -->
  <!-- Create the PDF JavaDocs from sources                                -->
  <!-- =================================================================== -->

  <target name="java2pdf" depends="init,up2date" if="pdf.outdated">
    <echo> Building the MyCoRe JavaDoc API documentation as PDF...</echo>

    <mkdir dir="${basedir}/documentation/pdf" />
    <javadoc
      packagenames        = "*"
      excludepackagenames = "${exclude.cm7},${exclude.cm8}"
      sourcepathref       = "sourcepath"
      classpathref        = "javadocs.classpath"
      author              = "true"
      version             = "true"
      access              = "package"
    >
      <doclet 
        name = "com.tarsec.javadoc.pdfdoclet.PDFDoclet"
        path = "${doclets}/itext-0.92.jar:${doclets}/pdfdoclet.jar" >                                                                                         
        <param name="-pdf"    value="${basedir}/documentation/pdf/javadocs.pdf" />             
        <param name="-config" value="${doclets}/pdfdoclet-mycore.properties" />  
      </doclet>             
 
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Remove the user created directories and files                       -->
  <!-- =================================================================== -->

  <target name="clean" description="Removes all files generated by this build file">
    <echo>Cleaning up...</echo>
    <delete dir="${basedir}/classes"  />
    <delete dir="${basedir}/documentation/html" />
    <delete dir="${basedir}/documentation/pdf" />
    <delete includeEmptyDirs="true" >
      <fileset dir="${basedir}/lib" includes="mycore*.jar" />
    </delete>
    <echo>---------------------------------------------------------</echo>
  </target>

  <!-- =================================================================== -->
  <!-- Update current working directory from CVS repository                -->
  <!-- =================================================================== -->

  <target name="update">
    <cvs
      cvsroot="${CVSRoot}"
      command="update -dP"
      dest="${basedir}"
    />
  </target>

  <!-- =================================================================== -->
  <!-- Build CVS ChangeLog                                                 -->
  <!-- =================================================================== -->

  <target name="changelog">
    <echo>

      Building CVS ChangeLog, please be patient...
    </echo>

    <mkdir dir="${basedir}/documentation/changelogs" />

    <tstamp>
      <format property="year" pattern="yyyy" />
    </tstamp>

    <mkdir dir="${basedir}/documentation/changelogs/${year}" />

    <exec executable="/mcr/applications/cvschangelogbuilder-2.0/cvschangelogbuilder.pl">
      <arg value="-module=mycore" />
      <arg value="-output=buildhtmlreport" />
      <arg value="-viewcvsurl=http://www.mycore.de/cvs/viewcvs.cgi" />
      <arg value="-dir=${basedir}/documentation/changelogs/${year}" /> 
    </exec>

    <move file="${basedir}/documentation/changelogs/${year}/cvschangelogbuilder_mycore.html" 
        tofile="${basedir}/documentation/changelogs/${year}/index.html" />
  </target>
  
  <!-- =================================================================== -->
  <!-- Do work after a CVS commit...                                       -->
  <!-- =================================================================== -->

  <target name="postcommit">
    <antcall target="update" />
    <antcall target="changelog" />
    <antcall target="javadocs" />
    <antcall target="java2pdf" />

    <chmod dir="${basedir}/documentation" type="file" perm="ugo+r"  includes="**/*" /> 
    <chmod dir="${basedir}/documentation" type="dir"  perm="ugo+rx" includes="**/*" />
  </target>

  <!-- =================================================================== -->
  <!-- Build downloadable distribution from CVS                            -->
  <!-- =================================================================== -->

  <target name="distribution">
    <antcall target="distribution.module">
      <param name="Distrib.Module" value="mycore" />
      <param name="Distrib.ZipFile" value="mycore" />
    </antcall>
    <antcall target="distribution.module">
      <param name="Distrib.Module" value="docportal" />
      <param name="Distrib.ZipFile" value="docportal" />
    </antcall>
    <antcall target="distribution.module">
      <param name="Distrib.Module" value="content/defaultsample" />
      <param name="Distrib.ZipFile" value="defaultsample" />
    </antcall>
  </target>

  <target name="distribution.module">
    <property name="Distrib.TmpDir"     value="tmp"      />
    <property name="Distrib.TargetDir"  value="/mcr/www/download" />
    <property name="Distrib.CVSRoot"    value=":pserver:anoncvs@server.mycore.de:/cvs" />
    <property name="Distrib.ReleaseTag" value="release_1_3_fixes" />
    <property name="Distrib.ReleaseNr"  value="1.3.beta" />

    <delete dir="${Distrib.TmpDir}" />

    <mkdir dir="${Distrib.TmpDir}"    />
    <mkdir dir="${Distrib.TargetDir}" />

    <cvs
      cvsroot="${Distrib.CVSRoot}"
      command="checkout -r ${Distrib.ReleaseTag} ${Distrib.Module}"
      dest="${Distrib.TmpDir}"
    />

    <zip destfile="${Distrib.TargetDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.zip"
      basedir="${Distrib.TmpDir}"
      includes="${Distrib.Module}/**"
      encoding="ISO_8859_1"
    />

    <tar tarfile="${Distrib.TmpDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.tar"
      basedir="${Distrib.TmpDir}"
      includes="${Distrib.Module}/**"
      longfile="gnu"
    />

    <gzip src="${Distrib.TmpDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.tar" zipfile="${Distrib.TargetDir}/${Distrib.ZipFile}-${Distrib.ReleaseNr}.tar.gz" />

    <delete dir="${Distrib.TmpDir}" />

    <chmod dir="${Distrib.TargetDir}" includes="${Distrib.ZipFile}-${Distrib.ReleaseNr}.*" perm="a+r" />

  </target>

</project>

