<project name="MyCoRe Components integration">
  <property name="components.order"
            value="acl-editor,broadcasting,buildtools,classbrowser,classhandler,imaging,indexing,iview,migration13-20,swf,useradmin,userlogin,wcms,webcli,webservices,z3950" />

  <import file="${integration.dir}/helper.xml" />
  <taskdef classname="org.mycore.common.MCRConfigurationTask" name="mcr-config" classpathref="integration.classpath" />
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="integration.classpath" />
  <!-- for task is not included in antcontrib.properties by default -->
  <taskdef name="for" classname="net.sf.antcontrib.logic.For" classpathref="integration.classpath" />
  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="integration.classpath" />

  <macrodef name="componentPreHook">
    <attribute name="target" />
    <sequential>
      <for list="${components.order}" param="component" parallel="false">
        <sequential>
          <if>
            <resourcecount when="greater" count="0">
              <fileset dir="${integration.dir}"
                       includes="components/@{component}/integrate.xml"
                       id="integrate.pre.@{target}">
                <containsregexp expression="\u003ctarget.*name=\u0022pre.@{target}\u0022" />
              </fileset>
            </resourcecount>
            <then>
              <subant target="pre.@{target}" inheritall="true" inheritrefs="true">
                <property name="basedir" value="${integration.dir}/components/@{component}" />
                <fileset refid="integrate.pre.@{target}" />
              </subant>
            </then>
            <else>
              <echo level="debug">No target pre.@{target} found in component @{component}.</echo>
            </else>
          </if>
        </sequential>
      </for>
    </sequential>
  </macrodef>
  <macrodef name="componentHook">
    <attribute name="target" />
    <sequential>
      <for list="${components.order}" param="component" parallel="false">
        <sequential>
          <if>
            <resourcecount when="greater" count="0">
              <fileset dir="${integration.dir}"
                       includes="components/@{component}/integrate.xml"
                       id="integrate.@{target}">
                <containsregexp expression="\u003ctarget.*name=\u0022@{target}\u0022" />
              </fileset>
            </resourcecount>
            <then>
              <subant target="@{target}" inheritall="true" inheritrefs="true">
                <property name="basedir" value="${integration.dir}/components/@{component}" />
                <fileset refid="integrate.@{target}" />
              </subant>
            </then>
            <else>
              <echo level="debug">No target @{target} found in component @{component}.</echo>
            </else>
          </if>
        </sequential>
      </for>
    </sequential>
  </macrodef>
  <macrodef name="merge.web.xml">
    <attribute name="web.xml.file" />
    <sequential>
      <echo level="info">Merging @{web.xml.file} into ${build.webapps}/WEB-INF/web.xml</echo>
      <xmltask source="${build.webapps}/WEB-INF/web.xml" dest="${build.webapps}/WEB-INF/web.xml">
        <insert path="/:web-app/:session-config" position="before" file="@{web.xml.file}" />
      </xmltask>
      <replace file="${build.webapps}/WEB-INF/web.xml" token='xmlns=""' />
    </sequential>
  </macrodef>
  <xmlcatalog id="hibernateDTD" classpathref="integration.classpath">
    <dtd publicid="-//Hibernate/Hibernate Configuration DTD 3.0//EN" location="hibernate-configuration-3.0.dtd" />
  </xmlcatalog>
  <macrodef name="AddHibernateMapping">
    <attribute name="class" />
    <sequential>
      <echo level="info">Adding @{class} to hibernate-configuration</echo>
      <propertyregex property="@{class}.resource" input="@{class}" regexp="\." replace="/" />
      <xmltask source="${build.config}/hibernate.cfg.xml"
               dest="${build.config}/hibernate.cfg.xml"
               public="-//Hibernate/Hibernate Configuration DTD 3.0//EN"
               system="http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
        <xmlcatalog refid="hibernateDTD" />
        <insert path="/hibernate-configuration/session-factory"
                xml="&lt;mapping resource=&#x22;${@{class}.resource}.hbm.xml&#x22; /&gt;" />
      </xmltask>
    </sequential>
  </macrodef>

  <!-- ================================= 
          target: invoke.cli             
         ================================= -->
  <target name="invoke.cli">
    <path id="cli.classpath">
      <pathelement location="${build.config}" />
      <pathelement location="${build.classes}" />
      <pathelement location="${build.schema}" />
      <path refid="integration.classpath" />
    </path>
    <java classname="org.mycore.frontend.cli.MCRCommandLineInterface"
          dir="${cli.directory}"
          fork="yes"
          maxmemory="${java.maxmemory}"
          classpathref="cli.classpath"
          failonerror="true">
      <arg line="${cli.command}" />
      <env key="LIBPATH" value="${env.LIBPATH}" />
      <env key="LD_LIBRARY_PATH" value="${env.LD_LIBRARY_PATH}" />
    </java>
  </target>
  <!-- ================================= 
          target: config              
         ================================= -->
  <target name="config" description="--> generates mycore.properties file">
    <property name="mycore.properties.target" location="${build.config}/mycore.properties" />
    <copy todir="${build.config}" overwrite="true" file="${integration.dir}/config/mycore.properties" />
    <componentPreHook target="config" />
    <for param="component.property" trim="true">
      <fileset id="mycore.components.properties" dir="${integration.dir}/components">
        <include name="*/config/mycore.properties" />
      </fileset>
      <sequential>
        <mcr-config propertyfile="${build.config}/mycore.properties" mergeFile="@{component.property}" />
      </sequential>
    </for>
    <for param="table.class"
         list="MCRACCESS,MCRACCESSRULE,MCRCSTORE,MCRFSNODES,MCRGROUPS,MCRGROUPADMINS,MCRGROUPMEMBERS,MCRLINKHREF,MCRRESUMPTIONTOKEN,MCRURN,MCRUSERS,MCRXMLTABLE">
      <sequential>
        <AddHibernateMapping class="org.mycore.backend.hibernate.tables.@{table.class}" />
      </sequential>
    </for>
    <AddHibernateMapping class="org.mycore.datamodel.classifications2.impl.MCRCategoryImpl" />
    <AddHibernateMapping class="org.mycore.datamodel.classifications2.impl.MCRCategoryLink" />
    <componentHook target="config" />
  </target>

  <!-- ================================= 
          target: info              
         ================================= -->
  <target name="info" description="--> prints some information about the integration">
    <echoproperties />
  </target>

  <!-- ================================= 
          target: webapp              
         ================================= -->
  <target name="webapp" description="--> integrates component in web application">
    <componentPreHook target="webapp" />
    <copy tofile="${build.webapps}/WEB-INF/web.xml" file="${integration.dir}/config/web.xml" overwrite="true" />
    <copy todir="${build.webapps}">
      <mapper type="regexp" from="^[^/\\]+[/\\]web[/\\](.*)$$" to="\1" />
      <fileset dir="${integration.dir}/components" includes="*/web/**" />
    </copy>
    <for param="web.xml.file">
      <fileset id="web.xml.components" dir="${integration.dir}/components">
        <include name="*/config/web.xml" />
      </fileset>
      <sequential>
        <merge.web.xml web.xml.file="@{web.xml.file}" />
      </sequential>
    </for>
    <componentHook target="webapp" />
  </target>

  <!-- ================================= 
          target: i18n              
         ================================= -->
  <target name="i18n" description="--> adds i18n keys to the web application">
    <componentPreHook target="i18n" />
    <concat destfile="${build.config}/messages_en.properties" append="false">
      <fileset file="${integration.dir}/config/messages_en.properties" />
      <fileset id="mycore.components.properties" dir="${integration.dir}/components">
        <include name="*/config/messages_en.properties" />
      </fileset>
    </concat>
    <concat destfile="${build.config}/messages_de.properties" append="false">
      <fileset file="${integration.dir}/config/messages_de.properties" />
      <fileset id="mycore.components.properties" dir="${integration.dir}/components">
        <include name="*/config/messages_de.properties" />
      </fileset>
    </concat>
    <componentHook target="i18n" />
  </target>

  <!-- ================================= 
          target: compile              
         ================================= -->
  <target name="compile" description="--> compiles component code for the application">
    <componentPreHook target="compile" />
    <componentHook target="compile" />
  </target>

  <!-- ================================= 
          target: create.default-rules              
         ================================= -->
  <target name="create.default-rules" description="--> adds some default ACL rules to the application">
    <componentPreHook target="create.default-rules" />
    <componentHook target="create.default-rules" />
  </target>

  <!-- ================================= 
          target: create.scripts              
         ================================= -->
  <target name="create.scripts" description="--> adds component scripts to the application">
    <componentPreHook target="create.scripts" />
    <componentHook target="create.scripts" />
  </target>

  <!-- ================================= 
          target: create.users              
         ================================= -->
  <target name="create.users" description="--> adds user to the application">
    <componentPreHook target="create.users" />
    <componentHook target="create.users" />
  </target>

  <!-- ================================= 
          target: deploy              
         ================================= -->
  <target name="webservice.deploy" description="--> deploys components to the web application">
    <componentPreHook target="webservice.deploy" />
    <componentHook target="webservice.deploy" />
  </target>

  <!-- ================================= 
          target: undeply              
         ================================= -->
  <target name="webservice.undeploy" description="--> undeploys components from the web application">
    <componentPreHook target="webservice.undeploy" />
    <componentHook target="webservice.undeploy" />
  </target>

</project>
